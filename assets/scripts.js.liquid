import Splide from "https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.esm.min.js";

class PageNavigation {
  hamburger = document.querySelectorAll(".hamburger");
  hamburgerLines = document.querySelectorAll(".line");
  mobileMenu = document.querySelector(".mobileNavContainer");
  overlay = document.querySelector(".overlay");
  searchButton = document.querySelector("#search-btn-nav");
  navSearchBar = document.querySelector(".input-group");
  searchBar = document.getElementById("searchBar");
  cartContainer = document.querySelector(".cartContainer");
  cartBtn = document.querySelector(".cart-nav");
  cartCloseBtn = document.getElementById("closeCart");
  constructor() {
    this.initializeEventListeners();
    this.handleImagesViewPort();
    this.initializeProdSlider();
  }
  initializeEventListeners() {

// NAV MENU
    const resetHamburgerLines = () => {
      this.hamburgerLines.forEach((line) => {
        line.classList.remove("r-down", "d-none", "r-up");
      });
    };
    const updateOverlay = () => {
      if (this.mobileMenu ?. classList.contains("mobileActive") || this.navSearchBar ?. classList.contains("displaySearchBar")) {
        this.overlay ?. classList.remove("d-none");
      } else {
        this.overlay ?. classList.add("d-none");
      }
    };

// Nav
    this.hamburger.forEach((btn) => {
      btn.addEventListener("click", () => {
        this.mobileMenu ?. classList.toggle("mobileActive");
        if (this.navSearchBar ?. classList.contains("displaySearchBar")) {
          this.overlay ?. classList.remove("d-none");
          this.navSearchBar ?. classList.remove("displaySearchBar");
        } else {
          this.overlay ?. classList.toggle("d-none");
        }
        this.hamburgerLines.forEach((line, i) => {
          if (i === 0) {
            line.classList.toggle("r-down");
          } else if (i === 1) {
            line.classList.toggle("d-none");
          } else {
            line.classList.toggle("r-up");
          }
        });
      });
    });

// Search Bar
    this.searchButton ?. addEventListener("click", () => {
      this.navSearchBar ?. classList.toggle("displaySearchBar");
      if (this.mobileMenu ?. classList.contains("mobileActive")) {
        this.overlay ?. classList.remove("d-none");
      } else {
        this.overlay ?. classList.toggle("d-none");
      }
      this.mobileMenu ?. classList.remove("mobileActive");
      resetHamburgerLines();
    });
    this.searchBar.addEventListener("keydown", () => {
      updateOverlay();
      this.mobileMenu ?. classList.remove("mobileActive");
      resetHamburgerLines();
    });
    document.addEventListener("keydown", (e) => {
      if (e.code === "Backquote" || e.code === "Escape") {
        this.resetActiveComponents();
      }
    });
    this.overlay ?. addEventListener("click", this.resetActiveComponents.bind(this));

// Cart
    this.cartBtn.addEventListener("click", () => {
      this.cartContainer ?. classList.add('cartActive');
    });
    this.cartCloseBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      this.cartContainer ?. classList.remove('cartActive');
    })
    document.addEventListener("click", (e) => {
      if (!this.cartContainer ?. contains(e.target) && !this.cartBtn.contains(e.target)) {
        this.cartContainer ?. classList.remove('cartActive');
      }
    })
  }
  resetActiveComponents() {
    this.overlay ?. classList.add("d-none");
    this.navSearchBar ?. classList.remove("displaySearchBar");
    this.resetNavMenu();
  }
  resetNavMenu() {
    this.mobileMenu ?. classList.remove("mobileActive");
    this.hamburgerLines.forEach((line) => {
      line.classList.remove("r-down", "d-none", "r-up");
    });
  }
  handleImagesViewPort() {
    const heroImage = document.querySelector(".heroImage");
    if (! heroImage) return;
    


    const desktopHeroImageURL = heroImage.getAttribute("data-desktop-bg");
    const mobileHeroImageURL = heroImage.getAttribute("data-mobile-bg");
    const mediaQuery = window.matchMedia("(max-width:768px)");

    const updateHeroImage = () => {
      heroImage.src = mediaQuery.matches
        ? mobileHeroImageURL
        : desktopHeroImageURL;
    };

    updateHeroImage();
    mediaQuery.addEventListener("change", updateHeroImage);


  }
  initializeProdSlider() {

    const splideCheck = document.getElementsByClassName("splide").length

    if (splideCheck) {
      const mainProd = new Splide("#singleProductShowCase", {
        type: "fade",
        arrows: false,
        pagination: false,
        cover: true,
        lazyLoad: "nearby"
      });
      const prodThumbnails = new Splide("#thumbnailProductShowCase", {
        rewind: true,
        fixedWidth: 131,
        fixedHeight: 100,
        isNavigation: true,
        lazyLoad: "nearby",
        pagination: false,
        cover: true,
        breakpoints: {
          450: {
            fixedWidth: 80,
            fixedHeight: 60
          }
        }
      });
      mainProd.sync(prodThumbnails);
      mainProd.mount();
      prodThumbnails.mount();
    }
  }
}
const nav = new PageNavigation();

// Purchase Type

const radios = document.querySelectorAll('input[name="properties[purchase_type]"]');

// Function to update the selected styling
function updateSelection() {
  radios.forEach(radio => {

// Remove the selected style from all option containers
    radio.closest('.option-container').classList.remove('selected-option');
  });

// Find the checked radio and add the style to its container
  const selectedRadio = document.querySelector('input[name="properties[purchase_type]"]:checked');
  if (selectedRadio) {
    selectedRadio.closest('.option-container').classList.add('selected-option');
  }
}

// Listen for changes on each radio input
radios.forEach(radio => {
  radio.addEventListener('change', updateSelection);
});

// Initialize on page load
updateSelection();

// --- Cart Functionality ---
document.addEventListener('DOMContentLoaded', function() {

// --- Setup Money Format and Shopify Helpers ---
  if (!window.shopMoneyFormat) {
    window.shopMoneyFormat = 'â‚¬{{amount}}';
  }
  if (typeof Shopify === 'undefined') {
    window.Shopify = {};
  }
  if (typeof Shopify.formatMoney !== 'function') {
    Shopify.formatMoney = function(cents, format) {
      const value = (cents / 100).toFixed(2);
      return format.replace('{{amount}}', value);
    };
  }

// --- Cart Open/Close Functions (using .cartActive) ---
  function openCart() {
    const cartContainer = document.querySelector('.cartContainer');
    if (cartContainer) {
      cartContainer.classList.add('cartActive');
    } else {
      console.error('Cart container not found.');
    }
  }
  function closeCart() {
    const cartContainer = document.querySelector('.cartContainer');
    if (cartContainer) {
      cartContainer.classList.remove('cartActive');
    }
  }

// --- Quantity Slider and Input Synchronization ---
  const quantitySlider = document.getElementById('quantitySlider');
  const quantityInput = document.getElementById('quantityInput');
  if (quantitySlider) {
    quantitySlider.min = 1;
  }
  if (quantitySlider && quantityInput) {

// Listen for slider changes.
// Ensure slider starts at same value as input
    setTimeout(() => {
      if (quantityInput && quantityInput.value) {
        quantitySlider.setAttribute('value', quantityInput.value);
      }
    }, 100);

    quantitySlider.addEventListener('change', function(e) {
      const newVal = e.detail && e.detail.value !== undefined
        ? e.detail.value
        : quantitySlider.getAttribute('value');
      quantityInput.value = newVal;
    });
    quantitySlider.addEventListener('input', function(e) {
      const newVal = e.detail && e.detail.value !== undefined
        ? e.detail.value
        : quantitySlider.getAttribute('value');
      quantityInput.value = newVal;
    });
    quantityInput.addEventListener('input', function(e) {
      const val = quantityInput.value;
      quantitySlider.setAttribute('value', val);
    });
  } else {
    console.error('Quantity slider or input not found.');
  }

// --- Discount Tiers Functionality ---
  const discountTiersElement = document.getElementById('discount-tiers-data');
  const originalPriceElement = document.getElementById('original-price-data');
  const variantPriceElement = document.getElementById('variant-price');
  const pricePerPieceElement = document.getElementById('price-per-piece');
  const discountDisplayElement = document.getElementById('discountDisplay');

// Initialize discount tiers functionality if elements exist
  if (discountTiersElement && originalPriceElement && quantityInput) {
    let discountTiers = [];

// Check for the global discount tiers variable first
    if (window.productDiscountTiers) {
      console.log('Using global discount tiers variable');

      if (window.productDiscountTiers.tiers) {
        discountTiers = window.productDiscountTiers.tiers;
      } else if (Array.isArray(window.productDiscountTiers)) {
        discountTiers = window.productDiscountTiers;
      }
    } else { // Fallback to parsing from data attribute if global variable is not available
      try { // Parse the JSON data from the data-tiers attribute
        const tiersString = discountTiersElement.getAttribute('data-tiers');
        console.log('Raw tiers data:', tiersString);

// Debug output

// Define fallback tiers if parsing fails
        const fallbackTiers = {
          tiers: [
            {
              min: 5,
              discount: 1
            }
          ]
        };

// Try different approaches to parse the JSON
        let tiersData = fallbackTiers;

        if (tiersString && tiersString.trim() !== '') { // Method 1: Try to parse directly
          try {
            tiersData = JSON.parse(tiersString);
            console.log('Direct parsing succeeded');
          } catch (parseError) {
            console.log('Direct parsing failed, trying other methods');

// Method 2: Try to clean the string
            try {
              const cleanedString = tiersString
                .replace(/&quot;/g, '"')
                .replace(/\\/g, '')
                .replace(/^"/, '')
                .replace(/"$/, '');

              console.log('Cleaned tiers data:', cleanedString);
              tiersData = JSON.parse(cleanedString);
              console.log('Cleaned string parsing succeeded');
            } catch (cleanError) {
              console.log('Cleaned string parsing failed, trying as object');

// Method 3: Check if it's already an object
              if (typeof tiersString === 'object' && tiersString !== null) {
                console.log('Using as object directly');
                tiersData = tiersString;
              } else { // Method 4: Last resort - use a hardcoded structure
                console.log('Using fallback tiers');
                tiersData = fallbackTiers;
              }
            }
          }
        }

// Ensure the tiers property exists
        if (tiersData && tiersData.tiers) {
          discountTiers = tiersData.tiers;
        } else if (Array.isArray(tiersData)) { // Handle case where tiers might be an array directly
          discountTiers = tiersData;
        }

// Sort tiers by minimum quantity (ascending)
        if (discountTiers.length > 0) {
          discountTiers.sort((a, b) => a.min - b.min);
          console.log('Final discount tiers:', discountTiers);
        }
      } catch (e) {
        console.error('Error parsing discount tiers:', e);
        console.error('Error details:', e.message);
        if (discountTiersElement) {
          console.log('Raw data attribute value:', discountTiersElement.getAttribute('data-tiers'));
        }
      }
    }

    const originalPrice = parseInt(originalPriceElement.getAttribute('data-price')) || 0;
    const piecesPerPack = parseInt(originalPriceElement.getAttribute('data-pieces')) || 1;

// Function to calculate the discounted price based on quantity
    function calculateDiscountedPrice(quantity) {
      if (! discountTiers.length) return originalPrice;
      


// Find applicable discount tier
      let applicableTier = null;
      for (const tier of discountTiers) {
        if (quantity >= tier.min) {
          applicableTier = tier;
        } else {
          break; // Tiers are sorted, so we can break early
        }
      }

      if (applicableTier) { // Calculate discount amount per item (in cents)
        const discountAmount = applicableTier.discount * 100; // Convert to cents
        return Math.max(0, originalPrice - discountAmount); // Apply discount to original price
      }return originalPrice;
    }

// Function to update price display based on quantity
    function updatePriceDisplay(quantity) {
      quantity = parseInt(quantity) || 1;

      console.log('Updating price display with quantity:', quantity);
      console.log('Current price data:', {originalPrice, piecesPerPack, discountTiers: discountTiers.length});

// Calculate the discounted price per item
      const discountedPricePerItem = calculateDiscountedPrice(quantity);
      const totalPrice = discountedPricePerItem * quantity;

      console.log('Calculated prices:', {discountedPricePerItem, totalPrice});

// Find applicable discount tier
      const applicableTier = discountTiers.find(tier => quantity >= tier.min);

      console.log('Applicable tier:', applicableTier);

// Update the discount display
      if (applicableTier && discountDisplayElement) {
        const discountAmount = applicableTier.discount * 100; // Convert to cents
        const discountPercentage = (discountAmount / originalPrice) * 100;
        discountDisplayElement.textContent = `${
          applicableTier.discount
        }â‚¬ off per item (${
          discountPercentage.toFixed(0)
        }%)`;
        discountDisplayElement.classList.add('text-discount');
      } else if (discountDisplayElement) {
        discountDisplayElement.textContent = 'No discount';
        discountDisplayElement.classList.remove('text-discount');
      }

// Update the price display
      if (variantPriceElement) { // Format price in the shop's money format
        const formattedPrice = Shopify.formatMoney(totalPrice, window.shopMoneyFormat);

        console.log('Formatted price:', formattedPrice);

// If there's a discount, show the original price as strikethrough
        if (applicableTier) {
          const originalTotalPrice = originalPrice * quantity;
          const formattedOriginalPrice = Shopify.formatMoney(originalTotalPrice, window.shopMoneyFormat);

          variantPriceElement.innerHTML = `${formattedPrice} <span class="discount fw-light roboto-font user-select-none">${formattedOriginalPrice}</span>`;
        } else { // No discount - just show the normal price
          variantPriceElement.innerHTML = formattedPrice;
        }

// Update price per piece
        if (pricePerPieceElement) {
          const pricePerPiece = discountedPricePerItem / piecesPerPack;
          const formattedPricePerPiece = Shopify.formatMoney(pricePerPiece, window.shopMoneyFormat);
          pricePerPieceElement.innerHTML = ` (${formattedPricePerPiece}) per piece`;
          console.log('Updated price per piece:', formattedPricePerPiece);
        }
      }
    }

// Update price on quantity change
    quantityInput.addEventListener('input', function() {
      updatePriceDisplay(this.value);
    });

// Listen for slider changes and update price
    if (quantitySlider) { // Update prices when slider changes
      quantitySlider.addEventListener('change', function(e) {
        const newVal = e.detail && e.detail.value !== undefined
          ? e.detail.value
          : quantitySlider.getAttribute('value');
        updatePriceDisplay(newVal);
      });

      quantitySlider.addEventListener('input', function(e) {
        const newVal = e.detail && e.detail.value !== undefined
          ? e.detail.value
          : quantitySlider.getAttribute('value');
        updatePriceDisplay(newVal);
      });
    }

// Initialize price display with default quantity
    updatePriceDisplay(quantityInput.value || 1);

// Handle variant selection
    const packageBoxes = document.querySelectorAll('#package-options .package-box');
    if (packageBoxes.length > 0) {
      console.log('Found package boxes:', packageBoxes.length);

// Add initial styling to package boxes to make them more interactive
      packageBoxes.forEach(box => {
        box.style.cursor = 'pointer';
        box.addEventListener('mouseover', () => {
          if (!box.classList.contains('selected')) {
            box.style.backgroundColor = 'rgba(26, 54, 131, 0.02)';
          }
        });
        box.addEventListener('mouseout', () => {
          if (!box.classList.contains('selected')) {
            box.style.backgroundColor = '';
          }
        });
      });

      packageBoxes.forEach(box => {
        box.addEventListener('click', function() {
          console.log('Package box clicked');

// Remove selected class from all boxes
          packageBoxes.forEach(b => b.classList.remove('selected'));

// Add selected class to clicked box
          this.classList.add('selected');

// Update form's variant ID
          const variantId = this.getAttribute('data-variant-id');
          const form = document.querySelector('.add-to-cart-form');
          if (form) {
            form.setAttribute('data-variant-id', variantId);
          }

// Update price data
          const variantPrice = parseInt(this.getAttribute('data-price')) || originalPrice;
          const variantPieces = parseInt(this.getAttribute('data-pieces')) || piecesPerPack;

          console.log('Variant data:', {
            variantId,
            variantPrice,
            variantPieces,
            originalPriceElement: !! originalPriceElement
          });

// Update data attributes and internal variables
          if (originalPriceElement) {
            originalPriceElement.setAttribute('data-price', variantPrice);
            originalPriceElement.setAttribute('data-pieces', variantPieces);

// Update the internal originalPrice variable used for calculations
            originalPrice = variantPrice;
            piecesPerPack = variantPieces;
          }

// Update subscription price (30% discount)
          const subscriptionPriceElement = document.querySelector('.subscription-Price');
          const subscriptionPriceSpan = document.getElementById('subscription-price');

          if (subscriptionPriceElement && subscriptionPriceSpan) {
            const subscriptionPrice = variantPrice * 0.7; // 30% discount
            subscriptionPriceElement.innerHTML = Shopify.formatMoney(subscriptionPrice, window.shopMoneyFormat) + ' <span class="discount fw-light roboto-font user-select-none" id="subscription-price">' + Shopify.formatMoney(variantPrice, window.shopMoneyFormat) + '</span>';
          }

// Update price display
          updatePriceDisplay(quantityInput.value || 1);
        });
      });

// Select first variant by default if none is selected
      if (!document.querySelector('#package-options .package-box.selected')) {
        packageBoxes[0].classList.add('selected');

// Trigger a click on the first box to initialize the price
        packageBoxes[0].click();
      }
    }
  }

// --- Add to Cart Event Listener ---
  const addToCartForms = document.querySelectorAll('.add-to-cart-form');
  if (addToCartForms.length === 0 && quantityInput) {
    console.error('No add-to-cart forms found.');
  }
  addToCartForms.forEach(function(form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      const variantId = form.getAttribute('data-variant-id');
      if (! variantId) {
        console.error('Variant ID not found on form.');
        return;
      }

// Get the quantity from the input field
      const quantity = parseInt(quantityInput ?. value, 10) || 1;
      console.log('Submitting Add to Cart for variant:', variantId, 'Quantity:', quantity);
      addToCart(variantId, quantity);
    });
  });
  function addToCart(variantId, quantity) {
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(
        {id: variantId, quantity: quantity}
      )
    }).then(response => response.json()).then(data => {
      console.log('Item added:', data);
      updateCartUI();
      openCart();
    }).catch(error => console.error('Error adding item:', error));
  }

// --- Update Cart UI ---
  function updateCartUI() {
    fetch('/cart.js').then(response => response.json()).then(cart => {

// Update cart count
      const cartCountElem = document.querySelector('.cart-count');
      if (cartCountElem) {
        cartCountElem.textContent = cart.item_count;
      } else {
        console.error('Cart count element not found.');
      }

// Build cart items HTML
      let itemsHtml = '';
      if (cart.items.length === 0) {
        itemsHtml = `<div class="cartItemsContainer bg-white rounded-8">
                       <h3 class="text-center pt-3">Your Cart is Empty</h3>
                     </div>`;
      } else {
        cart.items.forEach(function(item) {
          itemsHtml += `
            <div class="cartItemContainer d-flex align-items-center px-md-4 px-2 py-3" data-key="${
            item.key
          }">
              <div class="prodImage rounded-8">
                <img loading="lazy" src="${
            item.image
          }" alt="${
            item.title
          }" height="150" width="220" />
              </div>
              <div class="prod-info flex-grow-1 ps-3">
                <p class="title text-uppercase">${
            item.product_title
          }</p>
                <div class="d-flex align-items-center py-md-3 py-1">
                  <span class="original-price discount funnel-font">
                    ${
            item.compare_at_price
              ? Shopify.formatMoney(item.compare_at_price, window.shopMoneyFormat)
              : ''
            }
                  </span>
                  <h3 class="current-price fw-bold ps-2 cart-subtotal">
                    ${
            Shopify.formatMoney(item.price, window.shopMoneyFormat)
          }
                  </h3>
                </div>
                <div class="d-flex align-items-center justify-content-between">
                  <div class="quantity rounded-8 d-flex align-items-center justify-content-between">
                    <button class="btn-white p-2 btn-minus" data-key="${
            item.key
          }">
                      <img id="quantityBtnM" src="{{'minus.svg' | asset_url}}" width="20" height="20" alt="minus">
                    </button>
                    <p class="quantity-number">${
            item.quantity
          }</p>
                    <button class="btn-white p-2 btn-plus" data-key="${
            item.key
          }">
                      <img id="quantityBtnP" src="{{'plus.svg' | asset_url}}" width="10" height="10" alt="plus">
                    </button>
                  </div>
                  <p type="button" class="underline fw-bold funnel-font remove-item" data-key="${
            item.key
          }">Remove Item</p>
                </div>
              </div>
            </div>
          `;
        });
      }
      const cartItemsContainer = document.querySelector('.cartItemsContainer');
      if (cartItemsContainer) {
        cartItemsContainer.innerHTML = itemsHtml;
      } else {
        console.error('Cart items container not found.');
      }

// Update all subtotal elements (with the class .cart-subtotal)
      document.querySelectorAll('.cart-subtotal').forEach(function(subtotalElem) {
        subtotalElem.textContent = Shopify.formatMoney(cart.total_price, window.shopMoneyFormat);
      });
    }).catch(error => console.error('Error updating cart UI:', error));
  }

// --- Event Delegation for Quantity Buttons & Remove Links ---
  document.addEventListener('click', function(e) {

// Plus button
    const plusButton = e.target.closest('.btn-plus');
    if (plusButton) {
      const key = plusButton.getAttribute('data-key');
      if (key) {
        updateCartItemQuantity(key, 1);
        return;
      }
    }

// Minus button
    const minusButton = e.target.closest('.btn-minus');
    if (minusButton) {
      const key = minusButton.getAttribute('data-key');
      if (key) {
        updateCartItemQuantity(key, -1);
        return;
      }
    }

// Remove button
    const removeButton = e.target.closest('.remove-item');
    if (removeButton) {
      e.preventDefault();
      const key = removeButton.getAttribute('data-key');
      if (key) {
        updateCartItemQuantity(key, 0);
        return;
      }
    }
  });
  function updateCartItemQuantity(itemKey, change) {
    console.log('Updating quantity for key:', itemKey, 'Change:', change);
    fetch('/cart.js').then(response => response.json()).then(cart => {
      const item = cart.items.find(i => i.key === itemKey);
      if (! item) {
        console.error('Item not found for key:', itemKey);
        return;
      }
      let newQuantity = (change === 0)
        ? 0
        : item.quantity + change;
      if (newQuantity < 0) 
        newQuantity = 0;
      


      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(
          {id: itemKey, quantity: newQuantity}
        )
      }).then(response => response.json()).then(updatedCart => {
        console.log('Cart updated:', updatedCart);
        updateCartUI();
      }).catch(error => console.error('Error updating cart item:', error));
    });
  }

// --- Checkout Button Event ---
  const checkoutButton = document.querySelector('.checkout-button');
  if (checkoutButton) {
    checkoutButton.addEventListener('click', function() {
      window.location.href = '/checkout';
    });
  }

// --- Close Cart Event ---
  const closeCartButton = document.getElementById('closeCart');
  if (closeCartButton) {
    closeCartButton.addEventListener('click', function() {
      closeCart();
    });
  }

// --- Initialize Cart UI on Page Load ---
  updateCartUI();
});

document.addEventListener('DOMContentLoaded', () => {
  const searchBar = document.getElementById('searchBar');
  const searchResults = document.createElement('div');
  searchResults.id = 'searchResults';
  searchBar.parentNode.appendChild(searchResults);

// Add styles for search results
  const style = document.createElement('style');
  style.textContent = `
    #searchResults {
      position: absolute;
      width: 100%;
      top: 100%;
      max-height: 400px;
      overflow-y: auto;
      background: white;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      z-index: 1000;
      display: none;
    }
    .search-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
      cursor: pointer;
    }
    .search-item:hover {
      background: #f8f9fa;
    }
  `;
  document.head.appendChild(style);

// Debounce function to limit API calls
  const debounce = (func, delay) => {
    let timeout;
    return(...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), delay);
    };
  };

// Fetch search results from Shopify
  const fetchSearchResults = async (query) => {
    try {
      const response = await fetch(`/search/suggest.json?q=${
        encodeURIComponent(query)
      }&resources[type]=product&resources[limit]=10`);
      const data = await response.json();
      return data.resources.results.products;
    } catch (error) {
      console.error('Search error:', error);
      return [];
    }
  };

// Display search results
  const displayResults = (products) => {
    searchResults.innerHTML = '';
    if (products.length === 0) {
      searchResults.innerHTML = `<div class="search-item">No results found</div>`;
      searchResults.style.display = 'block';
      return;
    }

    products.forEach(product => {
      const item = document.createElement('a');
      item.className = 'search-item d-block text-decoration-none text-dark';
      item.href = product.url;
      item.innerHTML = `
        <div class="d-flex align-items-center">
          <img class="thumbnailSearch object-fit-cover" src="${
        product.image
      }" alt="${
        product.title
      }" width="50" height="50" class="me-3">
          <div class="ps-3">
            <h6 class="mb-0 text-main">${
        product.title
      }</h6>
            <small class="text-main">${
        product.price || money_with_currency
      }â‚¬</small>
          </div>
        </div>
      `;
      searchResults.appendChild(item);
    });
    searchResults.style.display = 'block';
  };

// Handle search input
  const handleSearch = debounce(async (e) => {
    const query = e.target.value.trim();
    if (query.length < 2) {
      searchResults.style.display = 'none';
      return;
    }

    const results = await fetchSearchResults(query);
    displayResults(results);
  }, 300);

// Event listeners
  searchBar.addEventListener('input', handleSearch);

// Hide results when clicking outside
  document.addEventListener('click', (e) => {
    if (! searchBar.contains(e.target)) {
      searchResults.style.display = 'none';
    }
  });

// Handle keyboard navigation
  searchBar.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      searchResults.style.display = 'none';
    }
  });
});

// setTimeout(() => {
// document.addEventListener('DOMContentLoaded', () => {
// const markOne = document.querySelector('.mark-value-0');
// console.log(markOne);
// })
// console.log('Hello');
// }, 1000);
document.addEventListener('DOMContentLoaded', () => {
  const slider = document.getElementById('quantitySlider');
  const qtyInput = document.getElementById('quantityInput');
  const unitPriceEl = document.getElementById('unitPrice');
  const perPieceEl = document.getElementById('perPiece');
  const totalPriceEl = document.getElementById('totalPrice');
  const discountLabel = document.getElementById('activeDiscountLabel');

  let baseCents = parseInt(document.querySelector('#package-options .package-box.selected') ?. dataset.price || document.querySelector('#package-options .package-box') ?. dataset.price, 10) || {{ product.price | times: 100 }};

  let pieces = parseInt(document.querySelector('#package-options .package-box.selected') ?. dataset.pieces || 1, 10);

  function recalcPrices(qty) {

// 1. Determine discount rate from metafields
    let discountRate = 0;
    if (window.discountTiers && window.discountTiers.tiers) {
      window.discountTiers.tiers.forEach(tier => {
        if (qty >= tier.min) {
          discountRate = tier.discount;
        }
      });
    }

// 2. Calculate discounted unit price
    const baseEuros = baseCents / 100;
    const discounted = baseEuros * (1 - discountRate);

// 3. Update unit price in UI
    const formattedUnit = Shopify.formatMoney(Math.round(discounted * 100), window.shopMoneyFormat);
    if (unitPriceEl) 
      unitPriceEl.textContent = formattedUnit;
    


// 4. Update per-piece price
    const perPiece = discounted / pieces;
    if (perPieceEl) {
      perPieceEl.textContent = `(${
        Shopify.formatMoney(Math.round(perPiece * 100), window.shopMoneyFormat)
      } per piece)`;
    }

// 5. Update total price
    const totalEuros = discounted * qty;
    if (totalPriceEl) {
      totalPriceEl.textContent = Shopify.formatMoney(Math.round(totalEuros * 100), window.shopMoneyFormat);
    }

// 6. Update discount label (optional)
    if (discountLabel) {
      discountLabel.textContent = discountRate > 0
        ? `${
        discountRate * 100
      }% off` : 'No discount';
    }
  }

// Handle quantity input/slider changes
  function onQuantityChange(val) {
    const qty = Math.max(1, parseInt(val, 10) || 1);
    if (qtyInput) 
      qtyInput.value = qty;
    


    if (slider) 
      slider.setAttribute('value', qty);
    


    recalcPrices(qty);
  }

// Attach event listeners
  if (slider) {
    slider.addEventListener('input', e => onQuantityChange(e.target.getAttribute('value')));
  }
  if (qtyInput) {
    qtyInput.addEventListener('input', e => onQuantityChange(e.target.value));
  }

// Initialize on page load
  const initialQty = qtyInput ?. value || slider ?. getAttribute('value') || 1;
  onQuantityChange(initialQty);
});