import Splide from "https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.esm.min.js";

class PageNavigation {
  hamburger = document.querySelectorAll(".hamburger");
  hamburgerLines = document.querySelectorAll(".line");
  mobileMenu = document.querySelector(".mobileNavContainer");
  overlay = document.querySelector(".overlay");
  searchButton = document.querySelector("#search-btn-nav");
  navSearchBar = document.querySelector(".input-group");
  searchBar = document.getElementById("searchBar");
  cartContainer = document.querySelector(".cartContainer");
  cartBtn = document.querySelector(".cart-nav");
  cartCloseBtn = document.getElementById("closeCart");
  constructor() {
    this.initializeEventListeners();
    this.handleImagesViewPort();
    this.initializeProdSlider();
  }
  initializeEventListeners() {

// NAV MENU
    const resetHamburgerLines = () => {
      this.hamburgerLines.forEach((line) => {
        line.classList.remove("r-down", "d-none", "r-up");
      });
    };
    const updateOverlay = () => {
      if (this.mobileMenu ?. classList.contains("mobileActive") || this.navSearchBar ?. classList.contains("displaySearchBar")) {
        this.overlay ?. classList.remove("d-none");
      } else {
        this.overlay ?. classList.add("d-none");
      }
    };

// Nav
    this.hamburger.forEach((btn) => {
      btn.addEventListener("click", () => {
        this.mobileMenu ?. classList.toggle("mobileActive");
        if (this.navSearchBar ?. classList.contains("displaySearchBar")) {
          this.overlay ?. classList.remove("d-none");
          this.navSearchBar ?. classList.remove("displaySearchBar");
        } else {
          this.overlay ?. classList.toggle("d-none");
        }
        this.hamburgerLines.forEach((line, i) => {
          if (i === 0) {
            line.classList.toggle("r-down");
          } else if (i === 1) {
            line.classList.toggle("d-none");
          } else {
            line.classList.toggle("r-up");
          }
        });
      });
    });

// Search Bar
    this.searchButton ?. addEventListener("click", () => {
      this.navSearchBar ?. classList.toggle("displaySearchBar");
      if (this.mobileMenu ?. classList.contains("mobileActive")) {
        this.overlay ?. classList.remove("d-none");
      } else {
        this.overlay ?. classList.toggle("d-none");
      }
      this.mobileMenu ?. classList.remove("mobileActive");
      resetHamburgerLines();
    });
    this.searchBar.addEventListener("keydown", () => {
      updateOverlay();
      this.mobileMenu ?. classList.remove("mobileActive");
      resetHamburgerLines();
    });
    document.addEventListener("keydown", (e) => {
      if (e.code === "Backquote" || e.code === "Escape") {
        this.resetActiveComponents();
      }
    });
    this.overlay ?. addEventListener("click", this.resetActiveComponents.bind(this));

// Cart
    this.cartBtn.addEventListener("click", () => {
      this.cartContainer ?. classList.add('cartActive');
    });
    this.cartCloseBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      this.cartContainer ?. classList.remove('cartActive');
    })
  }
  resetActiveComponents() {
    this.overlay ?. classList.add("d-none");
    this.navSearchBar ?. classList.remove("displaySearchBar");
    this.resetNavMenu();
  }
  resetNavMenu() {
    this.mobileMenu ?. classList.remove("mobileActive");
    this.hamburgerLines.forEach((line) => {
      line.classList.remove("r-down", "d-none", "r-up");
    });
  }
  handleImagesViewPort() {
    const heroImage = document.querySelector(".heroImage");
    if (! heroImage) return;
    


    const desktopHeroImageURL = heroImage.getAttribute("data-desktop-bg");
    const mobileHeroImageURL = heroImage.getAttribute("data-mobile-bg");
    const mediaQuery = window.matchMedia("(max-width:768px)");

    const updateHeroImage = () => {
      heroImage.src = mediaQuery.matches
        ? mobileHeroImageURL
        : desktopHeroImageURL;
    };

    updateHeroImage();
    mediaQuery.addEventListener("change", updateHeroImage);


  }
  initializeProdSlider() {

    const splideCheck = document.getElementsByClassName("splide").length

    if (splideCheck) {
      const mainProd = new Splide("#singleProductShowCase", {
        type: "fade",
        arrows: false,
        pagination: false,
        cover: true,
        lazyLoad: "nearby"
      });
      const prodThumbnails = new Splide("#thumbnailProductShowCase", {
        rewind: true,
        fixedWidth: 131,
        fixedHeight: 100,
        isNavigation: true,
        lazyLoad: "nearby",
        pagination: false,
        cover: true
      });
      mainProd.sync(prodThumbnails);
      mainProd.mount();
      prodThumbnails.mount();
    }
  }
}
const nav = new PageNavigation();

document.addEventListener('DOMContentLoaded', () => {

// --- Add to Cart ---
  document.querySelectorAll('.add-to-cart-form').forEach(form => {
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const variantId = form.getAttribute('data-variant-id');
      addToCart(variantId, 1);
    });
  });
  if (typeof Shopify === 'undefined') {
    window.Shopify = {};
  }
  if (typeof Shopify.formatMoney !== 'function') {
    Shopify.formatMoney = function(cents, format) {
      const value = (cents / 100).toFixed(2);
      return '$' + value;
    };
  }

  function addToCart(variantId, quantity) {
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(
        {id: variantId, quantity: quantity}
      )
    }).then(response => response.json()).then(data => {
      console.log('Item added:', data);
      updateCartUI();
    }).catch(error => console.error('Error adding item:', error));
  }

// --- Update Cart UI ---
  function updateCartUI() {
    fetch('/cart.js').then(response => response.json()).then(cart => {

// Update cart count
      const cartCountElem = document.querySelector('.cart-count');
      if (cartCountElem) 
        cartCountElem.textContent = cart.item_count;
      


// Build cart items HTML
      let itemsHtml = '';
      cart.items.forEach(item => {
        itemsHtml += `
            <div class="cartItemContainer d-flex align-items-center px-md-4 px-2 py-3" data-key="${
          item.key
        }">
              <div class="prodImage rounded-8">
                <img src="${
          item.image
        }" alt="${
          item.title
        }" height="150" width="220" />
              </div>
              <div class="prod-info flex-grow-1 ps-3">
                <p class="title text-uppercase">${
          item.product_title
        }</p>
                <div class="d-flex align-items-center py-md-3 py-1">
                  <span class="original-price discount funnel-font">${
          item.compare_at_price
            ? Shopify.formatMoney(item.compare_at_price, window.shopMoneyFormat)
            : ''
          }</span>
                  <h3 class="current-price fw-bold ps-2">${
          Shopify.formatMoney(item.price, window.shopMoneyFormat)
        }</h3>
                </div>
                <div class="d-flex align-items-center justify-content-between">
                  <div class="quantity rounded-8 d-flex align-items-center justify-content-between">
                    <button class="btn-white p-2 btn-minus" data-key="${
          item.key
        }">-</button>
                    <p class="quantity-number">${
          item.quantity
        }</p>
                    <button class="btn-white p-2 btn-plus" data-key="${
          item.key
        }">+</button>
                  </div>
                  <a href="#" class="underline fw-bold funnel-font remove-item" data-key="${
          item.key
        }">Remove Item</a>
                </div>
              </div>
            </div>
          `;
      });
      document.querySelector('.cartItemsContainer').innerHTML = itemsHtml;

// Update subtotal using Shopify's formatMoney helper
      document.getElementById('cart-subtotal').textContent = Shopify.formatMoney(cart.total_price, window.shopMoneyFormat);
    }).catch(error => console.error('Error updating cart UI:', error));
  }

// --- Modify Quantity & Remove Items ---
  document.addEventListener('click', e => {
    if (e.target.matches('.btn-plus')) {
      const key = e.target.getAttribute('data-key');
      updateCartItemQuantity(key, 1);
    }
    if (e.target.matches('.btn-minus')) {
      const key = e.target.getAttribute('data-key');
      updateCartItemQuantity(key, -1);
    }
    if (e.target.matches('.remove-item')) {
      e.preventDefault();
      const key = e.target.getAttribute('data-key');
      updateCartItemQuantity(key, 0);
    }
  });

  function updateCartItemQuantity(itemKey, change) {
    fetch('/cart.js').then(response => response.json()).then(cart => {
      const item = cart.items.find(i => i.key === itemKey);
      if (! item) return;
      

      let newQuantity = change === 0
        ? 0
        : item.quantity + change;
      if (newQuantity < 0) 
        newQuantity = 0;
      

      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(
          {id: itemKey, quantity: newQuantity}
        )
      }).then(response => response.json()).then(updatedCart => {
        console.log('Cart updated:', updatedCart);
        updateCartUI();
      }).catch(error => console.error('Error updating cart item:', error));
    });
  }

// --- Checkout ---
  const checkoutButton = document.querySelector('.checkout-button');
  if (checkoutButton) {
    checkoutButton.addEventListener('click', () => {
      window.location.href = '/checkout';
    });
  }

// --- Close Cart (if you have a close functionality) ---
  const closeCartButton = document.getElementById('closeCart');
  if (closeCartButton) {
    closeCartButton.addEventListener('click', () => {

// Assuming you hide the cart drawer by removing a class (e.g., 'active')
      document.querySelector('.cartContainer').classList.remove('active');
    });
  }

// Initialize cart UI on page load
  updateCartUI();
});