import Splide from "https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.esm.min.js";

class PageNavigation {
  hamburger = document.querySelectorAll(".hamburger");
  hamburgerLines = document.querySelectorAll(".line");
  mobileMenu = document.querySelector(".mobileNavContainer");
  overlay = document.querySelector(".overlay");
  searchButton = document.querySelector("#search-btn-nav");
  navSearchBar = document.querySelector(".input-group");
  searchBar = document.getElementById("searchBar");
  cartContainer = document.querySelector(".cartContainer");
  cartBtn = document.querySelector(".cart-nav");
  cartCloseBtn = document.getElementById("closeCart");
  constructor() {
    this.initializeEventListeners();
    this.handleImagesViewPort();
    this.initializeProdSlider();
  }
  initializeEventListeners() {

// NAV MENU
    const resetHamburgerLines = () => {
      this.hamburgerLines.forEach((line) => {
        line.classList.remove("r-down", "d-none", "r-up");
      });
    };
    const updateOverlay = () => {
      if (this.mobileMenu ?. classList.contains("mobileActive") || this.navSearchBar ?. classList.contains("displaySearchBar")) {
        this.overlay ?. classList.remove("d-none");
      } else {
        this.overlay ?. classList.add("d-none");
      }
    };

// Nav
    this.hamburger.forEach((btn) => {
      btn.addEventListener("click", () => {
        this.mobileMenu ?. classList.toggle("mobileActive");
        if (this.navSearchBar ?. classList.contains("displaySearchBar")) {
          this.overlay ?. classList.remove("d-none");
          this.navSearchBar ?. classList.remove("displaySearchBar");
        } else {
          this.overlay ?. classList.toggle("d-none");
        }
        this.hamburgerLines.forEach((line, i) => {
          if (i === 0) {
            line.classList.toggle("r-down");
          } else if (i === 1) {
            line.classList.toggle("d-none");
          } else {
            line.classList.toggle("r-up");
          }
        });
      });
    });

// Search Bar
    this.searchButton ?. addEventListener("click", () => {
      this.navSearchBar ?. classList.toggle("displaySearchBar");
      if (this.mobileMenu ?. classList.contains("mobileActive")) {
        this.overlay ?. classList.remove("d-none");
      } else {
        this.overlay ?. classList.toggle("d-none");
      }
      this.mobileMenu ?. classList.remove("mobileActive");
      resetHamburgerLines();
    });
    this.searchBar.addEventListener("keydown", () => {
      updateOverlay();
      this.mobileMenu ?. classList.remove("mobileActive");
      resetHamburgerLines();
    });
    document.addEventListener("keydown", (e) => {
      if (e.code === "Backquote" || e.code === "Escape") {
        this.resetActiveComponents();
      }
    });
    this.overlay ?. addEventListener("click", this.resetActiveComponents.bind(this));

// Cart
    this.cartBtn.addEventListener("click", () => {
      this.cartContainer ?. classList.add('cartActive');
    });
    this.cartCloseBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      this.cartContainer ?. classList.remove('cartActive');
    })
    document.addEventListener("click", (e) => {
      if (!this.cartContainer ?. contains(e.target) && !this.cartBtn.contains(e.target)) {
        this.cartContainer ?. classList.remove('cartActive');
      }
    })
  }
  resetActiveComponents() {
    this.overlay ?. classList.add("d-none");
    this.navSearchBar ?. classList.remove("displaySearchBar");
    this.resetNavMenu();
  }
  resetNavMenu() {
    this.mobileMenu ?. classList.remove("mobileActive");
    this.hamburgerLines.forEach((line) => {
      line.classList.remove("r-down", "d-none", "r-up");
    });
  }
  handleImagesViewPort() {
    const heroImage = document.querySelector(".heroImage");
    if (! heroImage) return;
    


    const desktopHeroImageURL = heroImage.getAttribute("data-desktop-bg");
    const mobileHeroImageURL = heroImage.getAttribute("data-mobile-bg");
    const mediaQuery = window.matchMedia("(max-width:768px)");

    const updateHeroImage = () => {
      heroImage.src = mediaQuery.matches
        ? mobileHeroImageURL
        : desktopHeroImageURL;
    };

    updateHeroImage();
    mediaQuery.addEventListener("change", updateHeroImage);


  }
  initializeProdSlider() {

    const splideCheck = document.getElementsByClassName("splide").length

    if (splideCheck) {
      const mainProd = new Splide("#singleProductShowCase", {
        type: "fade",
        arrows: false,
        pagination: false,
        cover: true,
        lazyLoad: "nearby"
      });
      const prodThumbnails = new Splide("#thumbnailProductShowCase", {
        rewind: true,
        fixedWidth: 131,
        fixedHeight: 100,
        isNavigation: true,
        lazyLoad: "nearby",
        pagination: false,
        cover: true,
        breakpoints: {
          450: {
            fixedWidth: 80,
            fixedHeight: 60
          }
        }
      });
      mainProd.sync(prodThumbnails);
      mainProd.mount();
      prodThumbnails.mount();
    }
  }
}
const nav = new PageNavigation();

// Purchase Type

const radios = document.querySelectorAll('input[name="properties[purchase_type]"]');

// Function to update the selected styling
function updateSelection() {
  radios.forEach(radio => {

// Remove the selected style from all option containers
    radio.closest('.option-container').classList.remove('selected-option');
  });

// Find the checked radio and add the style to its container
  const selectedRadio = document.querySelector('input[name="properties[purchase_type]"]:checked');
  if (selectedRadio) {
    selectedRadio.closest('.option-container').classList.add('selected-option');
  }
}

// Listen for changes on each radio input
radios.forEach(radio => {
  radio.addEventListener('change', updateSelection);
});

// Initialize on page load
updateSelection();

// --- Cart Functionality ---
document.addEventListener('DOMContentLoaded', function() {

// Ensure proper money format is defined
  window.shopMoneyFormat = window.shopMoneyFormat || '€{{amount}}';
  console.log('Using money format:', window.shopMoneyFormat);

// --- Setup Money Format and Shopify Helpers ---
  if (typeof Shopify === 'undefined') {
    window.Shopify = {};
  }
  if (typeof Shopify.formatMoney !== 'function') {
    Shopify.formatMoney = function(cents, format) {
      if (! cents) return'€0.00';
      


      const value = (cents / 100).toFixed(2);

// Handle case where format is undefined
      if (! format) 
        format = window.shopMoneyFormat || '€{{amount}}';
      


// Return with proper formatting
      try {
        return format.replace('{{amount}}', value);
      } catch (e) {
        console.error('Error formatting money:', e);
        return '€' + value;
      }
    };
  }

// --- Cart Open/Close Functions (using .cartActive) ---
  function openCart() {
    const cartContainer = document.querySelector('.cartContainer');
    if (cartContainer) {
      cartContainer.classList.add('cartActive');
    } else {
      console.error('Cart container not found.');
    }
  }
  function closeCart() {
    const cartContainer = document.querySelector('.cartContainer');
    if (cartContainer) {
      cartContainer.classList.remove('cartActive');
    }
  }

// --- Quantity Slider and Input Synchronization ---
  const quantitySlider = document.getElementById('quantitySlider');
  const quantityInput = document.getElementById('quantityInput');
  if (quantitySlider) {
    quantitySlider.min = 1;
  }
  if (quantitySlider && quantityInput) {

// Listen for slider changes.
// Ensure slider starts at same value as input
    setTimeout(() => {
      if (quantityInput && quantityInput.value) {
        quantitySlider.setAttribute('value', quantityInput.value);
      }
    }, 100);

    quantitySlider.addEventListener('change', function(e) {
      const newVal = e.detail && e.detail.value !== undefined
        ? e.detail.value
        : quantitySlider.getAttribute('value');
      quantityInput.value = newVal;
    });
    quantitySlider.addEventListener('input', function(e) {
      const newVal = e.detail && e.detail.value !== undefined
        ? e.detail.value
        : quantitySlider.getAttribute('value');
      quantityInput.value = newVal;
    });
    quantityInput.addEventListener('input', function(e) {
      const val = quantityInput.value;
      quantitySlider.setAttribute('value', val);
    });
  } else {
    console.error('Quantity slider or input not found.');
  }

// --- Discount Tiers Functionality ---
  const discountTiersElement = document.getElementById('discount-tiers-data');
  const originalPriceElement = document.getElementById('original-price-data');
  const variantPriceElement = document.getElementById('variant-price');
  const pricePerPieceElement = document.getElementById('price-per-piece');
  const discountDisplayElement = document.getElementById('discountDisplay');

// Get the unit label from the price-per-piece element's data attribute
  let unitLabel = 'piece';
  if (pricePerPieceElement) {
    unitLabel = pricePerPieceElement.getAttribute('data-unit-label') || 'piece';
  }

// Initialize discount tiers functionality if elements exist
  if (originalPriceElement && quantityInput) { // Call this function immediately once the DOM loads to ensure discounts are calculated
    setTimeout(() => {
      if (quantityInput) {
        const startQuantity = parseInt(quantityInput.value) || 1;
        console.log('Triggering initial price update with quantity:', startQuantity);

// If we have a quantity slider, make sure it's also initialized
        if (quantitySlider) {
          quantitySlider.setAttribute('value', startQuantity);
        }

// Force update the price display
        updatePriceDisplay(startQuantity);
      }
    }, 50);

    let discountTiers = [];

// Check for the global discount tiers variable first
    if (window.productDiscountTiers) {
      console.log('Using global discount tiers variable:', window.productDiscountTiers);

// Manually parse if it's in string format
      if (typeof window.productDiscountTiers === 'string') {
        try {
          window.productDiscountTiers = JSON.parse(window.productDiscountTiers);
          console.log('Parsed string to JSON:', window.productDiscountTiers);
        } catch (e) {
          console.error('Error parsing string to JSON:', e);
        }
      }

// Log specific format to help diagnose
      console.log('Type after parsing:', typeof window.productDiscountTiers);
      if (typeof window.productDiscountTiers === 'object') {
        console.log('Keys:', Object.keys(window.productDiscountTiers));
      }

// Try to extract discount tiers with better error handling
      try {
        if (window.productDiscountTiers.tiers) {
          discountTiers = window.productDiscountTiers.tiers;
          console.log('Found tiers array in global variable:', discountTiers);
        } else if (Array.isArray(window.productDiscountTiers)) {
          discountTiers = window.productDiscountTiers;
          console.log('Global variable is already an array:', discountTiers);
        } else { // Try to parse it if it's a string
          if (typeof window.productDiscountTiers === 'string') {
            const parsed = JSON.parse(window.productDiscountTiers);
            if (parsed.tiers) {
              discountTiers = parsed.tiers;
              console.log('Parsed string into tiers:', discountTiers);
            } else if (Array.isArray(parsed)) {
              discountTiers = parsed;
              console.log('Parsed string into array:', discountTiers);
            }
          }
        }
      } catch (err) {
        console.error('Error parsing global discount tiers:', err);
      }

// As a fallback
      if (discountTiers.length === 0) {
        console.log('Setting fallback discount tiers');
        discountTiers = [{
            min: 5,
            discount: 1
          }];
      }
    } else { // Fallback to parsing from data attribute if global variable is not available
      try { // Parse the JSON data from the data-tiers attribute
        const tiersString = discountTiersElement.getAttribute('data-tiers');
        console.log('Raw tiers data:', tiersString);

// Debug output

// Define fallback tiers if parsing fails
        const fallbackTiers = {
          tiers: [
            {
              min: 5,
              discount: 1
            }
          ]
        };

// Try different approaches to parse the JSON
        let tiersData = fallbackTiers;

        if (tiersString && tiersString.trim() !== '') { // Method 1: Try to parse directly
          try {
            tiersData = JSON.parse(tiersString);
            console.log('Direct parsing succeeded');
          } catch (parseError) {
            console.log('Direct parsing failed, trying other methods');

// Method 2: Try to clean the string
            try {
              const cleanedString = tiersString
                .replace(/&quot;/g, '"')
                .replace(/\\/g, '')
                .replace(/^"/, '')
                .replace(/"$/, '');

              console.log('Cleaned tiers data:', cleanedString);
              tiersData = JSON.parse(cleanedString);
              console.log('Cleaned string parsing succeeded');
            } catch (cleanError) {
              console.log('Cleaned string parsing failed, trying as object');

// Method 3: Check if it's already an object
              if (typeof tiersString === 'object' && tiersString !== null) {
                console.log('Using as object directly');
                tiersData = tiersString;
              } else { // Method 4: Last resort - use a hardcoded structure
                console.log('Using fallback tiers');
                tiersData = fallbackTiers;
              }
            }
          }
        }

// Ensure the tiers property exists
        if (tiersData && tiersData.tiers) {
          discountTiers = tiersData.tiers;
        } else if (Array.isArray(tiersData)) { // Handle case where tiers might be an array directly
          discountTiers = tiersData;
        }

// Sort tiers by minimum quantity (ascending)
        if (discountTiers.length > 0) { // First sort ascending for display purposes
          discountTiers.sort((a, b) => a.min - b.min);
          console.log('Final discount tiers (sorted):', discountTiers);

// Log summary for debugging
          const tiersInfo = discountTiers.map(tier => `${
            tier.min
          }+ items: ${
            tier.discount
          }% off`).join(', ');
          console.log('Available discounts:', tiersInfo);
        }
      } catch (e) {
        console.error('Error parsing discount tiers:', e);
        console.error('Error details:', e.message);
        if (discountTiersElement) {
          console.log('Raw data attribute value:', discountTiersElement.getAttribute('data-tiers'));
        }
      }
    }

    let originalPrice = parseInt(originalPriceElement.getAttribute('data-price')) || 0;
    let piecesPerPack = parseInt(originalPriceElement.getAttribute('data-pieces')) || 1;

// Function to calculate the discounted price based on quantity
    function calculateDiscountedPrice(quantity) {
      console.log('Calculating discount for quantity:', quantity);

      if (!window.discountTiers || !window.discountTiers.tiers || !window.discountTiers.tiers.length) {
        console.log('No discount tiers available, returning original price:', originalPrice);
        return originalPrice;
      }

      console.log('Available discount tiers:', window.discountTiers.tiers);

// Find applicable discount tier
      let applicableTier = null;

// First ensure tiers are sorted by minimum quantity in descending order
// to get the highest applicable tier first
      const sortedTiers = [...window.discountTiers.tiers].sort((a, b) => b.min - a.min);

      console.log('Sorted tiers (descending):', sortedTiers);

// Find the highest tier where quantity meets or exceeds minimum
      for (const tier of sortedTiers) {
        if (quantity >= tier.min) {
          applicableTier = tier;
          break; // Stop at first match (highest tier)
        }
      }

      console.log('Found applicable tier:', applicableTier);

      if (applicableTier) { // Calculate discount as a percentage (discount value is the percentage off)
        const discountPercentage = applicableTier.discount; // This is already the percentage value
        const discountAmount = (originalPrice * discountPercentage) / 100; // Calculate amount in cents
        const discountedPrice = Math.max(0, originalPrice - discountAmount);

        console.log('Calculated discount:', {
          originalPrice,
          discountPercentage: discountPercentage + '%',
          discountAmount,
          discountedPrice,
          tier: applicableTier
        });

        return discountedPrice; // Apply percentage-based discount to original price
      }console.log('No applicable tier found, returning original price:', originalPrice);
      return originalPrice;
    }

// Function to update price display based on quantity
    function updatePriceDisplay(quantity) {
      quantity = parseInt(quantity) || 1;

      console.log('Updating price display with quantity:', quantity);
      console.log('Current price data:', {originalPrice, piecesPerPack, discountTiers: discountTiers.length});

// Check if we have valid discount tiers before applying any logic
      const hasValidTiers = discountTiers && discountTiers.length > 0;

// Calculate the discounted price per item
      const discountedPricePerItem = hasValidTiers
        ? calculateDiscountedPrice(quantity)
        : originalPrice;
      const totalPrice = discountedPricePerItem * quantity;

      console.log('Calculated prices:', {discountedPricePerItem, totalPrice, hasValidTiers});

// Find applicable discount tier (only if we have valid tiers)
      let applicableTier = null;
      if (hasValidTiers && window.discountTiers && window.discountTiers.tiers) { // Sort tiers by min value in descending order
        const sortedTiers = [...window.discountTiers.tiers].sort((a, b) => b.min - a.min);

// Find first tier where quantity is greater than or equal to min
        for (const tier of sortedTiers) {
          if (quantity >= tier.min) {
            applicableTier = tier;
            break;
          }
        }
      }

      console.log('Applicable tier:', applicableTier);

// Update the discount display (if it exists)
      if (discountDisplayElement) {
        if (applicableTier) { // Use the discount value directly from the tier
          const discountPercentage = applicableTier.discount;

          console.log('Using discount percentage from tier:', discountPercentage);

// Show discount as percentage off total order
          discountDisplayElement.textContent = `You currently receive: ${discountPercentage}% Off your total order`;
          discountDisplayElement.classList.add('text-discount');
          console.log('Showing discount text:', discountDisplayElement.textContent);
        } else {
          discountDisplayElement.textContent = 'No discount';
          discountDisplayElement.classList.remove('text-discount');
          console.log('No discount applicable');
        }
      } else {
        console.log('No discount display element found - this product likely has no discount tiers');
      }

// Update the price display
      if (variantPriceElement) { // Format price in the shop's money format
        const formattedPrice = Shopify.formatMoney(totalPrice, window.shopMoneyFormat);

        console.log('Formatted price to display:', formattedPrice);

// If there's a discount, show the original price as strikethrough
        if (applicableTier) {
          const originalTotalPrice = originalPrice * quantity;
          const formattedOriginalPrice = Shopify.formatMoney(originalTotalPrice, window.shopMoneyFormat);

// Calculate price per piece based on discounted price
          const pricePerPiece = discountedPricePerItem / piecesPerPack;
          const formattedPricePerPiece = Shopify.formatMoney(pricePerPiece, window.shopMoneyFormat);

// Keep separate spans for main price and per-piece price
          variantPriceElement.innerHTML = `${formattedPrice} <span class="discount fw-light roboto-font user-select-none">${formattedOriginalPrice}</span>
            <span class="perPiece pb-2" id="price-per-piece" data-unit-label="${unitLabel}">(${formattedPricePerPiece}) per ${unitLabel}</span>`;

          console.log('Updated price with discount:', variantPriceElement.innerHTML);
        } else {

// No discount - just show the normal price
// Add the per-piece span directly to the innerHTML
          const pricePerPiece = totalPrice / (quantity * piecesPerPack);
          const formattedPricePerPiece = Shopify.formatMoney(pricePerPiece, window.shopMoneyFormat);

          variantPriceElement.innerHTML = `${formattedPrice} <span class="perPiece pb-2" id="price-per-piece" data-unit-label="${unitLabel}">(${formattedPricePerPiece}) per ${unitLabel}</span>`;
          console.log('Updated price without discount:', formattedPrice);
        }
      }
    }

// Update price on quantity change
    quantityInput.addEventListener('input', function() {
      updatePriceDisplay(this.value);
    });

// Listen for slider changes and update price
    if (quantitySlider) { // Update prices when slider changes
      quantitySlider.addEventListener('change', function(e) {
        const newVal = e.detail && e.detail.value !== undefined
          ? e.detail.value
          : quantitySlider.getAttribute('value');
        updatePriceDisplay(newVal);
      });

      quantitySlider.addEventListener('input', function(e) {
        const newVal = e.detail && e.detail.value !== undefined
          ? e.detail.value
          : quantitySlider.getAttribute('value');
        updatePriceDisplay(newVal);
      });
    }

// Initialize price display with default quantity
    updatePriceDisplay(quantityInput.value || 1);

// Set up debug button
    const debugTiersBtn = document.getElementById('debug-tiers-btn');
    if (debugTiersBtn) {
      debugTiersBtn.addEventListener('click', function() {
        console.log('------ DISCOUNT TIERS DEBUG ------');
        console.log('Current discount tiers:', discountTiers);
        console.log('Original price:', originalPrice);
        console.log('Pieces per pack:', piecesPerPack);

// Sort tiers correctly for display
        const sortedTiers = [... discountTiers].sort((a, b) => a.min - b.min);
        let debugInfo = "Discount Tiers:\n";

        sortedTiers.forEach(tier => {
          debugInfo += `• ${
            tier.min
          }+ items: ${
            tier.discount
          }% off\n`;
        });

// Test with several quantities
        debugInfo += "\nSample quantities:\n";
        const testQuantities = [
          1,
          3,
          5,
          7,
          10,
          15,
          20,
          30,
          40,
          50
        ];

        testQuantities.forEach(qty => {
          const discountedPrice = calculateDiscountedPrice(qty);
          const tier = discountTiers.find(t => qty >= t.min);

          debugInfo += `• Qty ${qty}: `;
          if (tier) {
            const discountAmount = (originalPrice * tier.discount) / 100;
            const totalDiscount = discountAmount * qty;

            debugInfo += `${
              Shopify.formatMoney(discountedPrice * qty, window.shopMoneyFormat)
            } `;
            debugInfo += `(${
              tier.discount
            }% off, saves ${
              Shopify.formatMoney(totalDiscount, window.shopMoneyFormat)
            })\n`;
          } else {
            debugInfo += `${
              Shopify.formatMoney(originalPrice * qty, window.shopMoneyFormat)
            } (no discount)\n`;
          }
        });

        alert(debugInfo);

// Force a specific discount for testing
        if (discountTiers.length > 0) { // Find the highest tier for a good test
          const highestTier = [... discountTiers].sort((a, b) => b.min - a.min)[0];
          const testQuantity = highestTier.min;

// Update UI elements
          quantityInput.value = testQuantity;

          if (quantitySlider) {
            quantitySlider.setAttribute('value', testQuantity);
          }

// Force recalculate price with discount
          updatePriceDisplay(testQuantity);

          console.log(`Testing with quantity ${testQuantity} to see highest discount tier`);
        } else {
          alert('No discount tiers defined. Please set up discount tiers in the metafield.');
        }
      });
    }

// Handle variant selection
    const packageBoxes = document.querySelectorAll('#package-options .package-box');
    if (packageBoxes.length > 0) {
      console.log('Found package boxes:', packageBoxes.length);

// Add initial styling to package boxes to make them more interactive
      packageBoxes.forEach(box => {
        box.style.cursor = 'pointer';
        box.addEventListener('mouseover', () => {
          if (!box.classList.contains('selected')) {
            box.style.backgroundColor = 'rgba(26, 54, 131, 0.02)';
          }
        });
        box.addEventListener('mouseout', () => {
          if (!box.classList.contains('selected')) {
            box.style.backgroundColor = '';
          }
        });
      });

      packageBoxes.forEach(box => {
        box.addEventListener('click', function() {
          console.log('Package box clicked');

// Remove selected class from all boxes
          packageBoxes.forEach(b => b.classList.remove('selected'));

// Add selected class to clicked box
          this.classList.add('selected');

// Update form's variant ID
          const variantId = this.getAttribute('data-variant-id');
          const form = document.querySelector('.add-to-cart-form');
          if (form) {
            form.setAttribute('data-variant-id', variantId);
          }

// Set quantity to 1
          if (quantityInput) {
            quantityInput.value = 1;
          }

// Set quantity slider to 1
          if (quantitySlider) {
            quantitySlider.setAttribute('value', 1);
          }

// Update internal variables
          const variantPrice = parseInt(this.getAttribute('data-price')) || originalPrice;
          const variantPieces = parseInt(this.getAttribute('data-pieces')) || piecesPerPack;

          console.log('Variant data:', {
            variantId,
            variantPrice,
            variantPieces,
            originalPriceElement: !! originalPriceElement
          });

// Update data attributes and internal variables
          if (originalPriceElement) {
            originalPriceElement.setAttribute('data-price', variantPrice);
            originalPriceElement.setAttribute('data-pieces', variantPieces);

// Update the internal originalPrice variable used for calculations
            originalPrice = variantPrice;
            piecesPerPack = variantPieces;

            console.log('Updated original price to:', originalPrice);
          }

// Update subscription price (30% discount)
          const subscriptionPriceElement = document.querySelector('.subscription-Price');
          const subscriptionPriceSpan = document.getElementById('subscription-price');

          if (subscriptionPriceElement && subscriptionPriceSpan) {
            const subscriptionPrice = variantPrice * 0.7; // 30% discount
            subscriptionPriceElement.innerHTML = Shopify.formatMoney(subscriptionPrice, window.shopMoneyFormat) + ' <span class="discount fw-light roboto-font user-select-none" id="subscription-price">' + Shopify.formatMoney(variantPrice, window.shopMoneyFormat) + '</span>';
          }

// Use quantity = 1
          const currentQuantity = 1;

// Trigger the discount display update, which will handle price updates
          const discountDisplayElement = document.getElementById('discountDisplay');
          if (discountDisplayElement) { // If we have our new discount display component
            const event = new Event('input');
            quantityInput.dispatchEvent(event);
          } else { // Fallback to the older system
            updatePriceDisplay(currentQuantity);
          }
        });
      });

// Select first variant by default if none is selected
      if (!document.querySelector('#package-options .package-box.selected')) {
        console.log('No variant selected, selecting first one by default');
        const firstBox = packageBoxes[0];
        if (firstBox) {
          firstBox.classList.add('selected');

// Get the variant data
          const variantId = firstBox.getAttribute('data-variant-id');
          let variantPrice = parseInt(firstBox.getAttribute('data-price')) || originalPrice;
          let variantPieces = parseInt(firstBox.getAttribute('data-pieces')) || piecesPerPack;

          console.log('Initial variant selection:', {variantId, variantPrice, variantPieces});

// Update the form
          const form = document.querySelector('.add-to-cart-form');
          if (form) {
            form.setAttribute('data-variant-id', variantId);
          }

// Set quantity to 1
          if (quantityInput) {
            quantityInput.value = 1;
          }

// Set quantity slider to 1
          if (quantitySlider) {
            quantitySlider.setAttribute('value', 1);
          }

// Update internal variables
          originalPrice = variantPrice;
          piecesPerPack = variantPieces;

// Update data attributes
          if (originalPriceElement) {
            originalPriceElement.setAttribute('data-price', variantPrice);
            originalPriceElement.setAttribute('data-pieces', variantPieces);
          }

// Update subscription price
          const subscriptionPriceElement = document.querySelector('.subscription-Price');
          const subscriptionPriceSpan = document.getElementById('subscription-price');

          if (subscriptionPriceElement && subscriptionPriceSpan) {
            const subscriptionPrice = variantPrice * 0.7; // 30% discount
            subscriptionPriceElement.innerHTML = Shopify.formatMoney(subscriptionPrice, window.shopMoneyFormat) + ' <span class="discount fw-light roboto-font user-select-none" id="subscription-price">' + Shopify.formatMoney(variantPrice, window.shopMoneyFormat) + '</span>';
          }

// Use quantity = 1
          const currentQuantity = 1;

// Trigger the discount display update, which will handle price updates
          const discountDisplayElement = document.getElementById('discountDisplay');
          if (discountDisplayElement) { // If we have our new discount display component
            const event = new Event('input');
            quantityInput.dispatchEvent(event);
          } else { // Fallback to the older system
            updatePriceDisplay(currentQuantity);
          }
        }
      }
    }
  }

// --- Add to Cart Event Listener ---
  const addToCartForms = document.querySelectorAll('.add-to-cart-form');
  if (addToCartForms.length === 0 && quantityInput) {
    console.error('No add-to-cart forms found.');
  }
  addToCartForms.forEach(function(form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      const variantId = form.getAttribute('data-variant-id');
      if (! variantId) {
        console.error('Variant ID not found on form.');
        return;
      }

// Get the quantity from the input field
      const quantity = parseInt(quantityInput ?. value, 10) || 1;
      console.log('Submitting Add to Cart for variant:', variantId, 'Quantity:', quantity);

// Pass discount tiers to the cart as a property if they exist
      let properties = {};
      if (window.discountTiers && window.discountTiers.tiers && window.discountTiers.tiers.length > 0) {
        properties._discount_tiers = JSON.stringify(window.discountTiers.tiers);
      }

      addToCart(variantId, quantity, properties);
    });
  });

  function addToCart(variantId, quantity, properties = {}) {
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(
        {id: variantId, quantity: quantity, properties: properties}
      )
    }).then(response => response.json()).then(data => {
      console.log('Item added:', data);
      updateCartUI();
      openCart();
    }).catch(error => console.error('Error adding item:', error));
  }

// --- Update Cart UI ---
  function updateCartUI() {
    fetch('/cart.js').then(response => response.json()).then(cart => {

// Update cart count
      const cartCountElem = document.querySelector('.cart-count');
      if (cartCountElem) {
        cartCountElem.textContent = cart.item_count;
      } else {
        console.error('Cart count element not found.');
      }

// Variables to track totals
      let rawSubtotal = 0;
      let discountedSubtotal = 0;

// Build cart items HTML
      let itemsHtml = '';
      if (cart.items.length === 0) {
        itemsHtml = `<div class="cartItemsContainer bg-white rounded-8">
                       <h3 class="text-center pt-3">Your Cart is Empty</h3>
                     </div>`;
      } else { // First calculate raw and discounted subtotals
        cart.items.forEach(function(item) {

// Get product-specific discount tiers from item properties
          let discountTiers = [];
          if (item.properties && item.properties._discount_tiers) {
            try {
              discountTiers = JSON.parse(item.properties._discount_tiers);
            } catch (e) {
              console.error('Error parsing discount tiers from item properties:', e);
            }
          }

// Original price (before any discounts)
          let itemOriginalPrice = item.original_price || item.price;

// Current price (may already include discounts from Shopify)
          let itemPrice = item.final_price || item.price;

// Apply discount tiers if available and not already applied
          if (discountTiers && discountTiers.length > 0) { // Sort tiers by min value in descending order
            const sortedTiers = [... discountTiers].sort((a, b) => b.min - a.min);

// Find applicable tier based on item quantity
            let applicableTier = null;
            for (const tier of sortedTiers) {
              if (item.quantity >= tier.min) {
                applicableTier = tier;
                break;
              }
            }

// If we found an applicable tier, calculate the discounted price
            if (applicableTier) {
              const discountPercentage = applicableTier.discount;
              const discountMultiplier = 1 - (discountPercentage / 100);
              const tieredDiscountPrice = itemOriginalPrice * discountMultiplier;

// Only override the price if our calculated discount is better
              if (tieredDiscountPrice < itemPrice) {
                itemPrice = tieredDiscountPrice;
              }
            }
          }

// Add to running totals
          rawSubtotal += (itemOriginalPrice * item.quantity);
          discountedSubtotal += (itemPrice * item.quantity);

// Format display prices
          const formattedOriginalPrice = Shopify.formatMoney(itemOriginalPrice * item.quantity, window.shopMoneyFormat);
          const formattedItemPrice = Shopify.formatMoney(itemPrice * item.quantity, window.shopMoneyFormat);

          itemsHtml += `
            <div class="cartItemContainer d-flex align-items-center px-md-4 px-2 py-3" data-key="${
            item.key
          }">
              <div class="prodImage rounded-8">
                <img loading="lazy" src="${
            item.image
          }" alt="${
            item.title
          }" height="150" width="220" />
              </div>
              <div class="prod-info flex-grow-1 ps-3">
                <p class="title text-uppercase">${
            item.product_title
          }</p>
                <div class="d-flex align-items-center py-md-3 py-1">
                  <span class="original-price discount funnel-font">
                    ${
            itemOriginalPrice !== itemPrice
              ? formattedOriginalPrice
              : ''
            }
                  </span>
                  <h3 class="current-price fw-bold ps-2">
                    ${formattedItemPrice}
                  </h3>
                </div>
                <div class="d-flex align-items-center justify-content-between">
                  <div class="quantity rounded-8 d-flex align-items-center justify-content-around">
                    <button class="btn-white p-2 btn-minus" data-key="${
            item.key
          }">
                      <img id="quantityBtnM" src="{{'minus.svg' | asset_url}}" width="20" height="20" alt="minus">
                    </button>
                    <p class="quantity-number">${
            item.quantity
          }</p>
                    <button class="btn-white p-2 btn-plus" data-key="${
            item.key
          }">
                      <img id="quantityBtnP" src="{{'plus.svg' | asset_url}}" width="10" height="10" alt="plus">
                    </button>
                  </div>
                  <p type="button" class="underline fw-bold funnel-font remove-item" data-key="${
            item.key
          }">Remove Item</p>
                </div>
              </div>
            </div>
          `;
        });
      }

      const cartItemsContainer = document.querySelector('.cartItemsContainer');
      if (cartItemsContainer) {
        cartItemsContainer.innerHTML = itemsHtml;
      } else {
        console.error('Cart items container not found.');
      }

// Update order discounts text
      const orderDiscountElem = document.getElementById('order-discounts');
      if (orderDiscountElem) {
        const discountAmount = rawSubtotal - discountedSubtotal;
        if (discountAmount > 0) {
          orderDiscountElem.textContent = '-' + Shopify.formatMoney(discountAmount, window.shopMoneyFormat);
        } else {
          orderDiscountElem.textContent = '-$0.00';
        }
      }

// Update all subtotal elements
      document.querySelectorAll('.cart-subtotal').forEach(function(subtotalElem) {
        subtotalElem.textContent = Shopify.formatMoney(discountedSubtotal, window.shopMoneyFormat);
      });
    }).catch(error => console.error('Error updating cart UI:', error));
  }

// --- Event Delegation for Quantity Buttons & Remove Links ---
  document.addEventListener('click', function(e) {

// Plus button
    const plusButton = e.target.closest('.btn-plus');
    if (plusButton) {
      const key = plusButton.getAttribute('data-key');
      if (key) {
        updateCartItemQuantity(key, 1);
        return;
      }
    }

// Minus button
    const minusButton = e.target.closest('.btn-minus');
    if (minusButton) {
      const key = minusButton.getAttribute('data-key');
      if (key) {
        updateCartItemQuantity(key, -1);
        return;
      }
    }

// Remove button
    const removeButton = e.target.closest('.remove-item');
    if (removeButton) {
      e.preventDefault();
      const key = removeButton.getAttribute('data-key');
      if (key) {
        updateCartItemQuantity(key, 0);
        return;
      }
    }
  });
  function updateCartItemQuantity(itemKey, change) {
    console.log('Updating quantity for key:', itemKey, 'Change:', change);
    fetch('/cart.js').then(response => response.json()).then(cart => {
      const item = cart.items.find(i => i.key === itemKey);
      if (! item) {
        console.error('Item not found for key:', itemKey);
        return;
      }
      let newQuantity = (change === 0)
        ? 0
        : item.quantity + change;
      if (newQuantity < 0) 
        newQuantity = 0;
      


// Preserve the item properties when updating quantity
      const properties = item.properties || {};

      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(
          {id: itemKey, quantity: newQuantity, properties: properties}
        )
      }).then(response => response.json()).then(updatedCart => {
        console.log('Cart updated:', updatedCart);
        updateCartUI();
      }).catch(error => console.error('Error updating cart item:', error));
    });
  }

// --- Checkout Button Event ---
  const checkoutButton = document.querySelector('.checkout-button');
  if (checkoutButton) {
    checkoutButton.addEventListener('click', function() {

// Get all items from cart, update properties if needed, then redirect to checkout
      fetch('/cart.js').then(response => response.json()).then(cart => {
        window.location.href = '/checkout';
      }).catch(error => console.error('Error processing checkout:', error));
    });
  }

// --- Close Cart Event ---
  const closeCartButton = document.getElementById('closeCart');
  if (closeCartButton) {
    closeCartButton.addEventListener('click', function() {
      closeCart();
    });
  }

// --- Initialize Cart UI on Page Load ---
  updateCartUI();
});

document.addEventListener('DOMContentLoaded', () => {
  const searchBar = document.getElementById('searchBar');
  const searchResults = document.createElement('div');
  searchResults.id = 'searchResults';
  searchBar.parentNode.appendChild(searchResults);

// Add styles for search results
  const style = document.createElement('style');
  style.textContent = `
    #searchResults {
      position: absolute;
      width: 100%;
      top: 100%;
      max-height: 400px;
      overflow-y: auto;
      background: white;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      z-index: 1000;
      display: none;
    }
    .search-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
      cursor: pointer;
    }
    .search-item:hover {
      background: #f8f9fa;
    }
  `;
  document.head.appendChild(style);

// Debounce function to limit API calls
  const debounce = (func, delay) => {
    let timeout;
    return(...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), delay);
    };
  };

// Fetch search results from Shopify
  const fetchSearchResults = async (query) => {
    try {
      const response = await fetch(`/search/suggest.json?q=${
        encodeURIComponent(query)
      }&resources[type]=product&resources[limit]=10`);
      const data = await response.json();
      return data.resources.results.products;
    } catch (error) {
      console.error('Search error:', error);
      return [];
    }
  };

// Display search results
  const displayResults = (products) => {
    searchResults.innerHTML = '';
    if (products.length === 0) {
      searchResults.innerHTML = `<div class="search-item">No results found</div>`;
      searchResults.style.display = 'block';
      return;
    }

    products.forEach(product => {
      const item = document.createElement('a');
      item.className = 'search-item d-block text-decoration-none text-dark';
      item.href = product.url;
      item.innerHTML = `
        <div class="d-flex align-items-center">
          <img class="thumbnailSearch object-fit-cover" src="${
        product.image
      }" alt="${
        product.title
      }" width="50" height="50" class="me-3">
          <div class="ps-3">
            <h6 class="mb-0 text-main">${
        product.title
      }</h6>
            <small class="text-main">${
        product.price || money_with_currency
      }€</small>
          </div>
        </div>
      `;
      searchResults.appendChild(item);
    });
    searchResults.style.display = 'block';
  };

// Handle search input
  const handleSearch = debounce(async (e) => {
    const query = e.target.value.trim();
    if (query.length < 2) {
      searchResults.style.display = 'none';
      return;
    }

    const results = await fetchSearchResults(query);
    displayResults(results);
  }, 300);

// Event listeners
  searchBar.addEventListener('input', handleSearch);

// Hide results when clicking outside
  document.addEventListener('click', (e) => {
    if (! searchBar.contains(e.target)) {
      searchResults.style.display = 'none';
    }
  });

// Handle keyboard navigation
  searchBar.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      searchResults.style.display = 'none';
    }
  });
});

// setTimeout(() => {
// document.addEventListener('DOMContentLoaded', () => {
// const markOne = document.querySelector('.mark-value-0');
// console.log(markOne);
// })
// console.log('Hello');
// }, 1000);
document.addEventListener('DOMContentLoaded', () => {
  const slider = document.getElementById('quantitySlider');
  const qtyInput = document.getElementById('quantityInput');
  const unitPriceEl = document.getElementById('unitPrice');
  const perPieceEl = document.getElementById('perPiece');
  const totalPriceEl = document.getElementById('totalPrice');
  const discountLabel = document.getElementById('activeDiscountLabel');

  let baseCents = parseInt(document.querySelector('#package-options .package-box.selected') ?. dataset.price || document.querySelector('#package-options .package-box') ?. dataset.price, 10) || {{ product.price | times: 100 }};

  let pieces = parseInt(document.querySelector('#package-options .package-box.selected') ?. dataset.pieces || 1, 10);

// Add event listeners to package boxes to update price variables when clicked
  const packageBoxes = document.querySelectorAll('#package-options .package-box');
  if (packageBoxes.length > 0) {
    packageBoxes.forEach(box => {
      box.addEventListener('click', function() {

// Update baseCents and pieces when a variant is selected
        baseCents = parseInt(this.dataset.price, 10) || baseCents;
        pieces = parseInt(this.dataset.pieces, 10) || pieces;

// Reset quantity to 1 when variant is changed
        if (qtyInput) {
          qtyInput.value = 1;
        }

        if (slider) {
          slider.setAttribute('value', 1);
        }

// Recalculate prices with quantity 1
        recalcPrices(1);
      });
    });
  }

  function recalcPrices(qty) {

// 1. Determine discount rate from metafields
    let discountRate = 0;
    if (window.discountTiers && window.discountTiers.tiers) { // Sort tiers by min value in descending order to get highest applicable tier
      const sortedTiers = [...window.discountTiers.tiers].sort((a, b) => b.min - a.min);

// Find the highest tier where quantity meets or exceeds minimum
      for (const tier of sortedTiers) {
        if (qty >= tier.min) {
          discountRate = tier.discount / 100; // Convert percentage to decimal
          break;
        }
      }
    }
  }

// ... rest of the existing code ...
});

// Discount Tiers Display Handler
document.addEventListener('DOMContentLoaded', () => {

// Initialize discount display
  const quantityInput = document.getElementById('quantityInput');
  const quantitySlider = document.getElementById('quantitySlider');
  const discountDisplay = document.getElementById('discountDisplay');
  const variantPriceElement = document.getElementById('variant-price');
  const originalPriceElement = document.getElementById('original-price-data');

  if (quantityInput && discountDisplay) { // Function to update the discount display and prices based on quantity
    function updateDiscountDisplay(quantity) {

// Get original price data
      let originalPrice = parseInt(originalPriceElement ?. getAttribute('data-price')) || 0;
      let piecesPerPack = parseInt(originalPriceElement ?. getAttribute('data-pieces')) || 1;

      if (!window.discountTiers || !window.discountTiers.tiers || window.discountTiers.tiers.length === 0) { // No discount scenario
        discountDisplay.textContent = 'No discount';
        discountDisplay.classList.remove('text-discount');

// Update the price without discount
        if (variantPriceElement) {
          const formattedPrice = Shopify.formatMoney(originalPrice * quantity, window.shopMoneyFormat);
          const pricePerPiece = originalPrice / piecesPerPack;
          const formattedPricePerPiece = Shopify.formatMoney(pricePerPiece, window.shopMoneyFormat);

          variantPriceElement.innerHTML = `${formattedPrice} 
            <span class="perPiece pb-2" id="price-per-piece" data-unit-label="${unitLabel}">
              (${formattedPricePerPiece}) per ${unitLabel}
            </span>`;
        }
        return;
      }

// Find the applicable discount tier
      const sortedTiers = [...window.discountTiers.tiers].sort((a, b) => b.min - a.min);
      let applicableTier = null;

// Find highest applicable tier
      for (const tier of sortedTiers) {
        if (quantity >= tier.min) {
          applicableTier = tier;
          break;
        }
      }

// Update the display and price
      if (applicableTier) { // Calculate discounted price
        const discountPercentage = applicableTier.discount;
        const discountMultiplier = (100 - discountPercentage) / 100;
        const discountedPricePerItem = originalPrice * discountMultiplier;
        const totalDiscountedPrice = discountedPricePerItem * quantity;

// Update discount display text
        discountDisplay.textContent = `You currently receive: ${
          applicableTier.discount
        }% Off your total order`;
        discountDisplay.classList.add('text-discount');

// Update price display with discount
        if (variantPriceElement) {
          const formattedDiscountedPrice = Shopify.formatMoney(totalDiscountedPrice, window.shopMoneyFormat);
          const originalTotalPrice = originalPrice * quantity;
          const formattedOriginalPrice = Shopify.formatMoney(originalTotalPrice, window.shopMoneyFormat);

// Calculate and format price per piece (based on discounted price)
          const discountedPricePerPiece = discountedPricePerItem / piecesPerPack;
          const formattedPricePerPiece = Shopify.formatMoney(discountedPricePerPiece, window.shopMoneyFormat);

// Update HTML with strikethrough for original price
          variantPriceElement.innerHTML = `${formattedDiscountedPrice} <span class="discount fw-light roboto-font user-select-none">${formattedOriginalPrice}</span>
            <span class="perPiece pb-2" id="price-per-piece" data-unit-label="${unitLabel}">(${formattedPricePerPiece}) per ${unitLabel}</span>`;
        }
      } else { // No applicable discount tier
        discountDisplay.textContent = 'No discount';
        discountDisplay.classList.remove('text-discount');

// Update price without discount
        if (variantPriceElement) {
          const formattedPrice = Shopify.formatMoney(originalPrice * quantity, window.shopMoneyFormat);
          const pricePerPiece = originalPrice / piecesPerPack;
          const formattedPricePerPiece = Shopify.formatMoney(pricePerPiece, window.shopMoneyFormat);

          variantPriceElement.innerHTML = `${formattedPrice} 
            <span class="perPiece pb-2" id="price-per-piece" data-unit-label="${unitLabel}">
              (${formattedPricePerPiece}) per ${unitLabel}
            </span>`;
        }
      }
    }

// Add event listeners
    quantityInput.addEventListener('input', (e) => {
      updateDiscountDisplay(parseInt(e.target.value) || 1);
    });

    if (quantitySlider) {
      quantitySlider.addEventListener('change', function(e) {
        const newVal = e.detail && e.detail.value !== undefined
          ? e.detail.value
          : quantitySlider.getAttribute('value');
        updateDiscountDisplay(parseInt(newVal) || 1);
      });

      quantitySlider.addEventListener('input', function(e) {
        const newVal = e.detail && e.detail.value !== undefined
          ? e.detail.value
          : quantitySlider.getAttribute('value');
        updateDiscountDisplay(parseInt(newVal) || 1);
      });
    }

// Initialize with current quantity
    updateDiscountDisplay(parseInt(quantityInput.value) || 1);
  }
});