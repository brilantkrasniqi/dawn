<section class="section-padding">
  <div class="custom-container">
    <div class="row">
      <div class="col-lg-6 col-12">
        <div class="position-sticky top-15">
          <div class="d-lg-flex flex-row-reverse align-items-center justify-content-center pt-lg-3 overflow-hidden">
            <div
              class="splide mx-auto"
              id="singleProductShowCase"
              aria-label="Product Show Case">
              <div class="splide__track">
                <ul class="splide__list ">
                  {% assign package_image_ids = product.variants | map: 'image' | compact | map: 'id' %}
                  {% for image in product.images %}
                    {% unless package_image_ids contains image.id %}
                      <li class="splide__slide">
                        <div class="singleProdContainer">
                          <img
                            src="{{ image | image_url }}"
                            height="200"
                            width="300"
                            alt="{{ product.title }}" />
                        </div>
                      </li>
                    {% endunless %}
                  {% endfor %}
                </ul>
              </div>
            </div>
            <div
              class="splide thumbnail-splide d-lg-flex align-items-center justify-content-center"
              id="thumbnailProductShowCase"
              aria-label="Product Show Case">
              <div class="splide__track px-4">
                <ul class="splide__list">
                  {% assign package_image_ids = product.variants | map: 'image' | compact | map: 'id' %}
                  {% for image in product.images %}
                    {% unless package_image_ids contains image.id %}
                      <li class="splide__slide">
                        <div class="thumbnailProdContainer">
                          <img
                            src="{{ image | image_url }}"
                            height="50"
                            width="50"
                            alt="{{ product.title }}" />
                        </div>
                      </li>
                    {% endunless %}
                  {% endfor %}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>

      {% comment %} Product Details {% endcomment %}
      <div class="col-lg-6 col-12 pt-lg-0 pt-5 ps-lg-5  d-flex flex-column">
        <h2 class="text-uppercase">{{ product.title }}</h2>


        {% comment %} Product Features {% endcomment %}
        <div class="mt-5 p-3 border rounded-8">
          <h3 class="fw-bold pb-4">{{ 'products.product.product_features' | t }}</h3>
          <div class="row">
            {% assign feature_icons = "feature_icon_one,feature_icon_two,feature_icon_three,feature_icon_four" | split: "," %}
            {% assign feature_descriptions = "feature_description_one,feature_description_two,feature_description_three,feature_description_four" | split: "," %}

            {% for icon in feature_icons %}
              {% assign index = forloop.index0 %}
              {% assign description_key = feature_descriptions[index] %}
              {% if product.metafields.custom[icon] != blank %}
                <div class="col-lg-6 col-md-12 col-sm-6 col-12 mt-2">
                  <div class="d-flex align-items-center">
                    <div class="bg-gray p-2 prodFeature w-fit rounded-8">
                      <img
                        src="{{ product.metafields.custom[icon] | file_url }}"
                        width="38"
                        height="38"
                        alt="" />
                    </div>
                    <p class="fw-medium ps-2">
                      {{ product.metafields.custom[description_key] }}
                    </p>
                  </div>
                </div>
              {% endif %}
            {% endfor %}
          </div>
        </div>


        {% case product.type %}
          {% when 'Roll' %}
            {% assign unit_label = 'roll' %}
          {% when 'Sheet' %}
            {% assign unit_label = 'sheet' %}
          {% when 'Bundle' %}
            {% assign unit_label = 'bundle' %}
          {% else %}
            {% assign unit_label = product.type %}
        {% endcase %}
        {% comment %} Variant Options {% endcomment %}
        <div class="d-flex pt-4">
          <div class="d-flex gap-3 mt-4 flex-wrap justify-content-center align-items-center" id="package-options">
            {% for variant in product.variants %}
              <div
                class="package-box p-3 rounded-8 border text-center d-flex flex-column justify-content-between {% if variant.available == false %}out-of-stock{% endif %}"
                data-variant-id="{{ variant.id }}"
                data-price="{{ variant.price }}"
                data-pieces="{{ variant.metafields.custom.pieces_per_pack | default: 1 }}"
                data-available="{{ variant.available }}"
                data-compare-at-price="{{ variant.compare_at_price }}">
                <div class="pb-3">
                  <img
                    src="{{variant.featured_image |  image_url }}"
                    width="50"
                    height="50"
                    class="object-fit-contain"
                    alt="">
                </div>
                <div class="d-flex flex-column justify-content-between h-100">
                  <p class="fw-bold">{{ variant.title }}</p>
                  <p class>{{ variant.price | money }}</p>
                  {% unless variant.available %}
                    <p class="text-danger mb-0 small">{{ 'products.product.out_of_stock' | t }}</p>
                  {% endunless %}
                </div>
              </div>
            {% endfor %}
          </div>
        </div>


        <div class="mt-5 rounded-8 border">
          <div class="one-Time p-4 option-container">
            <div class="d-flex justify-content-between"></div>
            <div id="price-container">
              <div class="">
                <h3 class="fw-bold fs-3 pt-1" id="variant-price">{{ product.price | money }}
                  {% assign pieces = product.metafields.custom.pieces_per_pack | default: 1 %}
                  {% assign net_price = product.price | divided_by: 1.0 %}
                  <span class="perPiece pb-2" id="price-per-piece">
                    ({{ net_price | divided_by: pieces | money }}) {{ 'products.product.per' | t }} {{ unit_label }}</span>
                </h3>
              </div>
              <div class="discount-container ms-2">
                {% if product.compare_at_price > product.price %}
                  <p class="compare-price-element" id="compare-price">{{ product.compare_at_price | money }}</p>
                {% else %}
                  <p class="compare-price-element d-none" id="compare-price"></p>
                {% endif %}
                <span class="discount-percentage-badge text-center"></span>
              </div>
            </div>
            {% if shop.taxes_included %}
              <small>{{ 'products.product.including_vat' | t }}</small>
            {% else %}
              <small>{{ 'products.product.excluding_vat' | t }}</small>
            {% endif %}
            <script>
              window.unitLabel = "{{ unit_label }}";
            </script>

            {% if product.metafields.custom.discount_tiers != blank %}
              <div class="mt-3" id="discount-container">
                <p class="fw-bold">
                  <span id="discountDisplay"></span>
                </p>
              </div>
            {% endif %}
            <div class="order-value-booster-block" id="cm9ivdx0x004pimv76lxdssu4"></div>
            <div class="d-flex align-items-center justify-content-between">
              <h3>{{ 'products.product.select_quantity' | t }}</h3>
              <input
                type="number"
                name="quantity"
                id="quantityInput"
                min="1"
                value="1"
                placeholder="Custom quantity"
                class="p-2 rounded-8 border-1" />
            </div>


            <!-- Wrap everything inside one add-to-cart form -->
            <form class="add-to-cart-form" data-variant-id="{{ product.variants.first.id }}">
              <!-- Discount tiers data -->
              {% if product.metafields.custom.discount_tiers != blank %}
                <script>
                  window.discountTiers = {{ product.metafields.custom.discount_tiers.value | json }};
                </script>
              {% else %}
                <script>
                  window.discountTiers = { "tiers": [] };
                </script>
              {% endif %}

              <!-- Original price data -->
              <div
                id="original-price-data"
                data-price="{{ product.price }}"
                data-pieces="{{ pieces }}"
                class="d-none"></div>
              <!-- Slider and Quantity Input -->
              <div class="py-5 px-3  position-relative">
                <tc-range-slider
                  mousewheel-disabled="true"
                  id="quantitySlider"
                  min="0"
                  max="50"
                  step="1"
                  round="0"
                  marks="true"
                  marks-values-count="11"
                  slider-width="100%"
                  slider-height="8px"
                  pointer-width="24px"
                  pointer-height="24px"
                  pointer-radius="8px"
                  slider-bg-fill="#1A3683"
                  slider-bg="#EDEFF5"
                  slider-bg-hover="#EDEFF5"
                  pointer-bg="#1A3683"
                  pointer-bg-hover="#1A3683"
                  pointer-bg-focus="#1A3683"
                  pointer-border="none"
                  pointer-border-focus="none"
                  marks-values-color="#0B266F"></tc-range-slider>
                <div class="first-mark">1</div>
              </div>
              <!-- Add to Cart Button -->
              <button
                type="submit"
                class="btn-main w-100 mt-5"
                {% unless product.available %}
                disabled{% endunless %}
                aria-label="{% if product.available %}Add {{ product.title }} to cart{% else %}{{ 'products.product.out_of_stock' | t }}{% endif %}">
                {% if product.available %}
                  {{ 'products.product.add_to_cart' | t }}
                {% else %}
                  {{ 'products.product.out_of_stock' | t }}
                {% endif %}
              </button>
              <small class="d-block text-center pt-2 free-shipping-product-message" style="font-weight: 500;">
                <!-- Will be populated by the formatFreeShippingText function -->
                {{ 'products.product.free_shipping_message' | t }}
              </small>
            </form>
          </div>
        </div>
        {% comment %} Product Description {% endcomment %}
        <div class="mt-5 p-3 border rounded-8 product-description">
          <p class="pt-3">{{ product.description }}</p>
        </div>
      </div>
    </div>
  </div>
</section>

<section id="relatedProductsSection" class="section-padding">
  <div class="custom-container">
    <h2 class="text-center">{{ section.settings.related_products_heading }}</h2>
    <div class="row g-4 pt-5">
      {% assign current_product = product %}

      {% comment %}Determine which products to show based on settings{% endcomment %}
      {% case section.settings.related_products_source %}
        {% when 'same_type' %}
          {% assign related_products = collections.all.products | where: "type", product.type %}
        {% when 'same_collection' %}
          {% assign related_products = product.collections.first.products %}
        {% when 'same_vendor' %}
          {% assign related_products = collections.all.products | where: "vendor", product.vendor %}
        {% when 'manual' %}
          {% assign related_products = section.settings.manual_products %}
      {% endcase %}

      {% assign products_shown = 0 %}
      {% for product in related_products limit: 8 %}
        {% if product.id != current_product.id and products_shown < 4 %}
          {% assign products_shown = products_shown | plus: 1 %}
          <div class="col-lg-3 col-md-4 col-sm-6 col-6 pt-3">
            <div class="product-container">
              <a href="{{ product.url }}">
                <div class="prod-image">
                  <img
                    loading="lazy"
                    src="{{ product.featured_image | image_url }}"
                    width="250"
                    height="225"
                    alt="{{ product.title }}" />
                  {% unless product.available %}
                    <span class="out-of-stock-badge">{{ 'products.product.out_of_stock' | t }}</span>
                  {% endunless %}
                  {% if product.compare_at_price > product.price %}
                    <span class="sale-badge">Sale</span>
                  {% endif %}
                </div>
              </a>
              <div class="prod-info">
                <p id="title">
                  <a href="{{ product.url }}">{{ product.title }}</a>
                </p>
                <div class="d-flex flex-sm-row flex-column align-items-md-center align-items-start justify-content-between">
                  <div>
                    <div class="d-flex align-items-center">
                      <h3 class="fw-bold" id="price">{{ product.price | money }}
                        {% assign pieces_per_pack = product.metafields.custom.pieces_per_pack | default: 1 %}
                      </h3>
                      {% if product.compare_at_price > product.price %}
                        <p class="card-compare-price ps-2">{{ product.compare_at_price | money }}</p>
                      {% endif %}
                    </div>
                    {% if pieces_per_pack > 1 %}
                      {% case product.type %}
                        {% when 'Roll' %}
                          {% assign unit_label = 'roll' %}
                        {% when 'Sheet' %}
                          {% assign unit_label = 'sheet' %}
                        {% when 'Bundle' %}
                          {% assign unit_label = 'bundle' %}
                        {% else %}
                          {% assign unit_label = product.type %}
                    {% endcase %}
                      {% comment %} Calculate precise price per piece in cents (e.g., 1220 cents for $12.20) {% endcomment %}
                      {% assign precise_per_piece_cents = product.price | times: 1.0 | divided_by: pieces_per_pack %}

                        {% if precise_per_piece_cents > 0 and precise_per_piece_cents < 1.0 %}
                        {% comment %} 
rice per piece is a positive fraction of a cent (e.g., 0.01 to 0.99 cents).
isplay with higher precision. For example, 0.61 cents should become $0.0061. 
{% endcomment %}

                        {% comment %} Convert fractional cents to the main currency unit (e.g., dollars) {% endcomment %}
                        {% assign value_in_main_currency = precise_per_piece_cents | divided_by: 100.0 %}

                      {% assign precision_for_fractions = 4 %}
                        {% comment %} Adjust if more/less precision is desired, e.g. 0.0061 needs 4 {% endcomment %}
                      {% assign formatted_high_precision_value = value_in_main_currency | round: precision_for_fractions %}

                        {% comment %} 
reate the display string with currency symbol using a placeholder method.
his adapts to your store's currency formatting (e.g., prefix/suffix symbol, decimal/comma separators). 
{% endcomment %}
                        {% assign placeholder_value = "###PRICE###" %}
                      {% assign dummy_amount_in_cents_for_format = 123 %}
                        {% comment %} Represents $1.23, €1,23, ¥123 etc. {% endcomment %}
                      {% assign formatted_dummy_price = dummy_amount_in_cents_for_format | money %}

                        {% comment %} 
repare known numeric string representations of the dummy price.
his helps in replacing the numeric part of the formatted_dummy_price.
xample: "$1.23" (num_dummy_val_dot), "1,23 €" (num_dummy_val_comma), "¥123" (num_dummy_val_int) 
{% endcomment %}
                        {% assign num_dummy_val_dot = "1.23" %}
                        {% assign num_dummy_val_comma = "1,23" %}
                      {% assign num_dummy_val_int = "123" %}

                        {% comment %} Create a template by replacing the numeric part of the dummy formatted price with the placeholder {% endcomment %}
                        {% assign money_template = formatted_dummy_price | replace: num_dummy_val_dot, placeholder_value %}
                        {% assign money_template = money_template | replace: num_dummy_val_comma, placeholder_value %}
                      {% assign money_template = money_template | replace: num_dummy_val_int, placeholder_value %}

                        {% comment %} Insert the actual high-precision formatted value into the template {% endcomment %}
                        {% assign final_display_string = money_template | replace: placeholder_value, formatted_high_precision_value %}

                        {% comment %} Fallback: If the placeholder logic didn't work (e.g. very unusual money format not caught by 1.23/1,23/123) {% endcomment %}
                        {% unless money_template contains placeholder_value %}
                          {% comment %} This means the placeholder was not successfully introduced into money_template.
efault to prepending the shop currency symbol.
{% endcomment %}
                          {% assign currency_symbol = shop.currency | default: "$" %}
                          {% assign final_display_string = currency_symbol | append: " " | append: formatted_high_precision_value %}
                        {% endunless %}
                        {% assign display_value = final_display_string %}
                      {% else %}
                        {% comment %} 
rice per piece is 0, or 1 cent or more.
se standard 'money' filter. Input should be cents, rounded to the nearest whole number. 
{% endcomment %}
                        {% assign cents_for_standard_filter = precise_per_piece_cents | round %}
                        {% assign display_value = cents_for_standard_filter | money %}
                      {% endif %}

                      <p class="perPiece pb-2">({{ display_value }}) per {{ unit_label }}</p>
                    {% endif %}
                  </div>
                  <form
                    class="add-to-cart-form prod-card"
                    data-variant-id="{{ product.variants.first.id }}"
                    data-price="{{ product.price }}"
                    data-compare-at-price="{{ product.compare_at_price }}">
                    <button
                      type="submit"
                      class="funnel-font fw-bold d-sm-block d-none"
                      {% unless product.available %}
                      disabled{% endunless %}
                      aria-label="{% if product.available %}Add {{ product.title }} to cart{% else %}{{ 'products.product.out_of_stock' | t }}{% endif %}">
                      {% if product.available %}
                        + {{ 'products.product.add_to_cart' | t }}
                      {% else %}
                        {{ 'products.product.out_of_stock' | t }}
                      {% endif %}
                    </button>
                  </form>
                </div>
              </div>
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>
</section>
<script>
  window.translations = {
    youCurrentlySave: {{ 'products.product.you_currently_save' | t | json }},
    offYourTotalOrder: {{ 'products.product.off_your_total_order' | t | json }},
    yourCartIsEmpty: {{ 'cart.general.empty' | t | json }},
    addToCart: {{ 'products.product.add_to_cart' | t | json }},
    outOfStock: {{ 'products.product.out_of_stock' | t | json }},
    free: {{ 'cart.general.free' | t | json }},
    per: {{ 'products.product.per' | t | json }}
  };
</script>
{% schema %}
  {
    "name": "Product Main",
    "settings": [
      {
        "type": "textarea",
        "id": "why_sub",
        "label": "Why choose subscription?",
        "default": "Our tightly wound rolls offer a higher density ensuring they last longer than others. While the upfront cost may be slightly higher, you'll use less in the long run. Our thoughtfully designed wraps blend seamlessly with your kitchen decor, avoiding bright or gimmicky patterns."
      },
      {
        "type": "url",
        "id": "b2b_link",
        "label": "B2B link"
      },
      {
        "type": "header",
        "content": "Related Products Settings"
      },
      {
        "type": "text",
        "id": "related_products_heading",
        "label": "Related Products Heading",
        "default": "You may also like"
      },
      {
        "type": "select",
        "id": "related_products_source",
        "label": "Show products from",
        "options": [
          {
            "value": "same_type",
            "label": "Same product type"
          },
          {
            "value": "same_collection",
            "label": "Same collection"
          },
          {
            "value": "same_vendor",
            "label": "Same vendor"
          },
          {
            "value": "manual",
            "label": "Manually selected"
          }
        ],
        "default": "same_type"
      },
      {
        "type": "product_list",
        "id": "manual_products",
        "label": "Manual product selection",
        "limit": 4,
        "info": "Select up to 4 products to show. Only applies when 'Manually selected' is chosen above."
      }
    ],
    "presets": [
      {
        "name": "Product Main"
      }
    ]
  }
{% endschema %}