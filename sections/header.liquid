<div class="overlay d-none"></div>
<!-- NAV -->

<div class="bg-main-blue custom-container">
  <div class="row d-flex align-items-center py-lg-3 py-2">
    <div class="d-lg-block d-none col-lg-6">
      <p class="fw-bold funnel-font text-white text-nowrap free-shipping-text">
        <!-- Will be populated by JavaScript -->
        {{ section.settings.free_shipping_text | replace: '[amount]', '...' }}
      </p>
    </div>
    <div class="col-lg-6 col-12 px-1">
      <ul class="d-flex flex-row align-items-center justify-content-lg-end justify-content-between text-white w-100">
        <li class="">
          <a class="text-white pe-lg-2 ps-0" href="mailto:{{ section.settings.contact_email }}">{{ section.settings.contact_email }}</a>
        </li>
        <li class="">
          {% if customer %}
            <a class="text-white pe-lg-2 pe-4" href="{{ routes.account_url }}">{{ section.settings.account_text }}</a>
          {% else %}
            <a class="text-white pe-lg-2 pe-0" href="{{ routes.account_login_url }}">{{ section.settings.sign_in_text }}</a>
          {% endif %}
        </li>
        <li class="d-lg-block d-none">
          {% comment %} Define available locale codes {% endcomment %}
        {% assign locale_codes = "sq,en,de" | split: "," %}

          {% comment %} Capture current path and query string {% endcomment %}
          {% assign full_path = request.path %}
          {% assign qs = request.query_string | prepend: "?" %}
          {% unless request.query_string %}
            {% assign qs = "" %}
        {% endunless %}

          {% comment %} Strip existing locale prefix from path using slice to check start {% endcomment %}
          {% assign path_no_locale = full_path %}
          {% assign en_prefix = full_path | slice: 0, 3 %}
          {% assign de_prefix = full_path | slice: 0, 3 %}
          {% if en_prefix == '/en' %}
            {% assign path_no_locale = full_path | remove_first: '/en' %}
          {% elsif de_prefix == '/de' %}
            {% assign path_no_locale = full_path | remove_first: '/de' %}
        {% endif %}

          <!-- Get the current language based on request URL -->
          {% assign current_language = 'sq' %}
          {% if en_prefix == '/en' %}
            {% assign current_language = 'en' %}
          {% elsif de_prefix == '/de' %}
            {% assign current_language = 'de' %}
          {% endif %}

          <!-- Language selector markup with current language -->
          <div class="language-selector">
            <a
              href="#"
              class="text-white language-current"
              id="languageSelector">
              {% case current_language %}
                {% when 'en' %}English
              {% when 'de' %}Deutsch
              {% else %}Shqip
          {% endcase %}
          <span class="language-arrow">â–¼</span>
        </a>
        <div class="language-menu" style="display: none;">
          {% for code in locale_codes %}
            {% case code %}
              {% when 'sq' %}
                {% assign name = 'Shqip' %}
                {% assign prefix = '' %}
              {% when 'en' %}
                {% assign name = 'English' %}
                {% assign prefix = '/en' %}
              {% when 'de' %}
                {% assign name = 'Deutsch' %}
                {% assign prefix = '/de' %}
            {% endcase %}
            {% assign target_url = prefix | append: path_no_locale | append: qs %}
            <a
              class="language-item"
              data-lang="{{ code }}"
              href="{{ target_url | replace: '//' , '/' }}">
              {{ name }}
            </a>
          {% endfor %}
        </div>
      </div>
    </li>
  </ul>
</div></div></div><!-- Actual Nav -->
<nav class="nav-header sticky-top bg-white" id="mainNavigation">
<div class="custom-container position-relative">
  <div class="row p-14">
    <div class="col-lg-7 col-sm-4 col-6 d-flex align-items-center p-0">
      <div class="hamburger d-lg-none d-block" type="button">
        <span class="line mb-1"></span>
        <span class="line mb-1"></span>
        <span class="line"></span>
      </div>
      <a href="{{routes.root_url}}">
        <img
          class="me-lg-3"
          id="nav-logo"
          src="{{ 'flutura-logo-lg.svg' | asset_url }}"
          alt="Flutura"
          width="100"
          height="50" />
      </a>
      <ul class="d-lg-flex d-none fw-bold ps-xxl-4 ps-xl-1" id="fluturaNavLinks">
        {% for link in linklists.main-menu.links %}
          <li>
            <a href="{{link.url}}" class="pe-xxl-5 pe-xl-4 pe-2">{{ link.title }}</a>
          </li>
        {% endfor %}
      </ul>
    </div>

    <div class="col-lg-5 ps-lg-0 col-sm-8 col-6 my-auto ms-auto p-0">
      <div class="d-flex align-items-center justify-content-end">
        <div type="button" class="cart-nav d-flex align-items-center justify-content-end ms-3">
          <img
            id="cart-svg"
            src="{{'cart-svg.svg' |  asset_url}}"
            width="18"
            height="18"
            alt="Cart" />
          <p class="fw-bold" id="cart-count">
            &nbsp;
            <span class="d-sm-inline-block d-none cart-subtotal">{{ section.settings.cart_text }}</span>
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Cart -->
<div class="cartContainer d-flex flex-column justify-content-between bg-gray">
  <div>
    <div class="d-flex align-items-center justify-content-md-between justify-content-around pb-4 pt-2">
      <h3 class="text-uppercase funnel-font">
        {{ section.settings.your_cart_text }} (<span class="cart-count">0</span>
        {{ section.settings.items_text }})
      </h3>
      <div
        class="d-flex align-items-center"
        type="button"
        id="closeCart">
        <img
          id="closeBtn"
          src="{{'Close.svg' |  asset_url}}"
          width="20"
          height="20"
          alt="">
        <h3 class="fs-5 funnel-font user-select-none ps-1" type="button">
          {{ section.settings.close_text }}
        </h3>
      </div>
    </div>

    <!-- CART ITEMS -->
    <div class="cartItemsContainer bg-white rounded-8"></div>
  </div>

  <!-- CART INFO -->
  <div class="cart-info">
    <div class="order-value-booster-block" id="cm9ivdx0x004pimv76lxdssu4"></div>
    <div class="d-flex align-items-md-center align-items-start justify-content-between border-bottom py-2">
      <p>{{ section.settings.discount_code_text }}</p>
      <div class="discount-code-container">
        <input
          type="text"
          name="discount-code"
          id="discount-code"
          placeholder="{{ section.settings.enter_code_placeholder }}"
          class="rounded-8" />
        <small id="discount-saved-message" class="text-success d-none mt-1">
          {{ section.settings.discount_saved_text | default: 'Will be applied at checkout' }}
        </small>
      </div>
    </div>
    <div class="d-flex align-items-center justify-content-between py-2 d-none">
      <p>{{ section.settings.order_discounts_text }}</p>
      <p id="order-discounts">-$0.00</p>
    </div>
    <div class="d-flex align-items-start justify-content-md-between justify-content-between py-2">
      <p class="d-flex align-items-center position-relative info-icon-container user-select-none">
        {{ section.settings.shipping_costs_text }}
        <span>
          <img
            src="{{'info-icon.svg' | asset_url}}"
            alt="Info Icon"
            class="ps-1 info-icon"
            width="13"
            height="13" />
          <small class="info-text">
            A more accurate shipping cost will be calculated at checkout based on your address.
          </small>
        </span>
      </p>
      <p id="shipping-costs"></p>
    </div>
    <div class="d-flex align-items-start justify-content-between pt-2 pb-4">
      <h3 class="fw-bold">{{ section.settings.subtotal_text }}</h3>
      <h3 class="fw-bold cart-subtotal">$0.00</h3>
    </div>
    <div class="btn-main w-100 checkout-button text-center" style="cursor:pointer;">
      {{ section.settings.checkout_button_text }}
    </div>
  </div>
</div>

<!-- Mobile Menu -->
<div class="mobileNavContainer d-lg-none">
  <div>
    <div class="d-flex align-items-center justify-content-between">
      <img
        src="{{ 'flutura-logo-lg.svg' | asset_url }}"
        width="65"
        height="31"
        class="mobileNavLogo"
        alt="Flutra" />
      <button class="m-0 btn hamburger">{{ section.settings.close_text }}</button>
    </div>

    <div class="mobileNavLinks">
      {% for link in linklists.mobile-menu.links %}
        <a class="mobileNavItem py-3 funnel-font fw-medium" href="{{link.url}}">
          {{ link.title }}
          <img
            src="{{'right-arrow.svg' |  asset_url}}"
            width="20"
            height="20"
            alt=""
            style="width: 10px;height: 10px;" />
        </a>
      {% endfor %}

      <div class="mobileNavItem">
        {% if customer %}
          <a class="funnel-font fw-medium" href="{{ routes.account_url }}">{{ section.settings.account_text }}</a>
        {% else %}
          <a class="funnel-font fw-medium" href="{{ routes.account_login_url }}">{{ section.settings.sign_in_text }}</a>
        {% endif %}
        <img
          src="{{'right-arrow.svg' |  asset_url}}"
          width="20"
          height="20"
          alt=""
          style="width: 10px;height: 10px;" />
      </div>

      <div class="emailNavMobile">
        <p class="fw-medium">{{ section.settings.email_contact_text }}</p>
        <a href="mailto:{{ section.settings.contact_email }}">{{ section.settings.contact_email }}</a>
      </div>
    </div>
  </div>

  <div class="socialNavMobile">
    <p class="fw-bold free-shipping-mobile-text">
      {{ section.settings.mobile_free_shipping_text | replace: '[amount]', '...' }}
    </p>
    <div class="d-flex align-items-center justify-content-between pt-3">
      <div>{{ section.settings.choose_language_text }}</div>
      <div class="mobile-language-selector">
        <a
          class="language-mobile-current"
          href="#"
          id="mobileLangSelector">
          {% case current_language %}
            {% when 'en' %}English
          {% when 'de' %}Deutsch
          {% else %}Shqip
      {% endcase %}
      <span class="language-arrow">â–¼</span>
    </a>
    <div class="language-mobile-menu">
      {% for code in locale_codes %}
        {% case code %}
          {% when 'sq' %}
            {% assign name = 'Shqip' %}
            {% assign prefix = '' %}
          {% when 'en' %}
            {% assign name = 'English' %}
            {% assign prefix = '/en' %}
          {% when 'de' %}
            {% assign name = 'Deutsch' %}
            {% assign prefix = '/de' %}
        {% endcase %}
        {% assign target_url = prefix | append: path_no_locale | append: qs %}
        <a
          class="language-mobile-item"
          data-lang="{{ code }}"
          href="{{ target_url | replace: '//' , '/' }}">
          {{ name }}
        </a>
      {% endfor %}
    </div>
  </div>
</div></div></div></nav><style>
/* Header styles */
.nav-header {
  width: 100%;
  transition: all 0.3s ease;
}

#shipping-costs {
  font-weight: 400;
}

#shipping-costs.free {
  color: #28a745;
  font-weight: 600;
}

#discount-code {
  border: 1px solid #ced4da;
  padding: 0.375rem 0.75rem;
  transition: border-color 0.15s ease-in-out;
}

#discount-code.is-valid {
  border-color: #198754;
  background-color: #f8f9fa;
}

#discount-code.is-invalid {
  border-color: #dc3545;
  background-color: #f8f9fa;
}

#discount-code:disabled {
  background-color: #e9ecef;
  cursor: not-allowed;
}

/* Language selector styles */
.language-selector {
  position: relative;
  display: inline-block;
}

.language-current {
  cursor: pointer;
  text-decoration: none;
}

.language-arrow {
  font-size: 0.7em;
  margin-left: 4px;
}

.language-menu {
  display: none;
  position: absolute;
  background-color: white;
  min-width: 120px;
  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
  z-index: 1050;
  border-radius: 4px;
  overflow: hidden;
}

.language-selector:hover .language-menu {
  display: block !important;
}

.language-item {
  display: block;
  padding: 8px 12px;
  text-decoration: none;
  color: black;
  transition: background-color 0.2s;
}

.language-item:hover {
  background-color: #f1f1f1;
  text-decoration: none;
}

/* Mobile language selector styles */
.mobile-language-selector {
  position: relative;
  display: inline-block;
}

.language-mobile-current {
  cursor: pointer;
  text-decoration: none;
  color: #212529;
  font-weight: 500;
}

.language-mobile-menu {
  display: none;
  position: absolute;
  right: -14px;
  top: -175px;
  background-color: white;
  min-width: 120px;
  box-shadow: 0 -8px 16px 0 rgba(0, 0, 0, 0.1);
  z-index: 1050;
  border-radius: 4px;
  overflow: hidden;
}

.language-mobile-item {
  color: #212529;
  padding: 1rem !important;
  text-decoration: none;
  display: block;
}

.language-mobile-item:hover {
  background-color: #f1f1f1;
  text-decoration: none;
}

/* Discount code container */
.discount-code-container {
  display: flex;
  flex-direction: column;
}

#discount-saved-message {
  font-size: 0.75rem;
  text-align: right;
}</style><script>
  // Set global free shipping threshold that can be accessed by all scripts
  window.freeShippingThreshold = {{ section.settings.free_shipping_threshold | default: 10000 }};
  
  // Global function to update free shipping text with proper currency format
  window.formatFreeShippingText = function() {
    // Get the free shipping text elements
    const desktopFreeShippingText = document.querySelector('.free-shipping-text');
    const mobileFreeShippingText = document.querySelector('.free-shipping-mobile-text');
    const productFreeShippingText = document.querySelector('.free-shipping-product-message');
    
    if (typeof Shopify !== 'undefined' && typeof Shopify.formatMoney === 'function') {
      // Format the threshold amount in the current currency
      const amount = Shopify.formatMoney(window.freeShippingThreshold);
      
      // Replace the placeholder in desktop header
      if (desktopFreeShippingText) {
        const desktopText = "{{ section.settings.free_shipping_text }}".replace('[amount]', amount);
        desktopFreeShippingText.textContent = desktopText;
      }
      
      // Replace the placeholder in mobile menu
      if (mobileFreeShippingText) {
        const mobileText = "{{ section.settings.mobile_free_shipping_text }}".replace('[amount]', amount);
        mobileFreeShippingText.textContent = mobileText;
      }
      
      // Update product page free shipping message if it exists
      if (productFreeShippingText) {
        productFreeShippingText.innerHTML = 'Free shipping on orders over ' + amount;
      }
    }
  };
  
  // Run on page load
  document.addEventListener('DOMContentLoaded', function() {
    if (window.formatFreeShippingText) {
      window.formatFreeShippingText();
    }
    
    // Get current language from URL
    const currentUrl = window.location.pathname;
    let currentLang = 'sq'; // Default to Albanian
    
    if (currentUrl.startsWith('/en/') || currentUrl === '/en') {
      currentLang = 'en';
    } else if (currentUrl.startsWith('/de/') || currentUrl === '/de') {
      currentLang = 'de';
    }
    
    // Update language selectors to reflect current language
    const updateLanguageDisplay = function() {
      // Desktop language display
      const desktopLangText = document.getElementById('languageSelector');
      if (desktopLangText) {
        let langText = 'Shqip';
        if (currentLang === 'en') {
          langText = 'English';
        } else if (currentLang === 'de') {
          langText = 'Deutsch';
        }
        
        // Update only the text node, not the arrow span
        const textNode = Array.from(desktopLangText.childNodes)
          .filter(node => node.nodeType === 3)[0];
        if (textNode) {
          textNode.nodeValue = langText;
        }
      }
      
      // Mobile language display
      const mobileLangText = document.getElementById('mobileLangSelector');
      if (mobileLangText) {
        let langText = 'Shqip';
        if (currentLang === 'en') {
          langText = 'English';
        } else if (currentLang === 'de') {
          langText = 'Deutsch';
        }
        
        // Update only the text node, not the arrow span
        const textNode = Array.from(mobileLangText.childNodes)
          .filter(node => node.nodeType === 3)[0];
        if (textNode) {
          textNode.nodeValue = langText;
        }
      }
    };
    
    // Call once on page load
    updateLanguageDisplay();
    
    // Desktop language switcher functionality
    const desktopLangSelector = document.getElementById('languageSelector');
    const desktopLangMenu = document.querySelector('.language-menu');
    
    if (desktopLangSelector && desktopLangMenu) {
      desktopLangSelector.addEventListener('click', function(e) {
        e.preventDefault();
        // Toggle display manually (overrides the hover)
        desktopLangMenu.style.display = desktopLangMenu.style.display === 'block' ? 'none' : 'block';
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', function(e) {
        if (!desktopLangSelector.contains(e.target) && !desktopLangMenu.contains(e.target)) {
          desktopLangMenu.style.display = 'none';
        }
      });
    }
    
    // Mobile language switcher functionality
    const mobileLangSelector = document.getElementById('mobileLangSelector');
    const mobileLangMenu = document.querySelector('.language-mobile-menu');
    
    if (mobileLangSelector && mobileLangMenu) {
      mobileLangSelector.addEventListener('click', function(e) {
        e.preventDefault();
        mobileLangMenu.style.display = mobileLangMenu.style.display === 'block' ? 'none' : 'block';
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', function(e) {
        if (!mobileLangSelector.contains(e.target) && !mobileLangMenu.contains(e.target)) {
          mobileLangMenu.style.display = 'none';
        }
      });
    }
    
    // Clean up language link URLs to avoid path issues
    const languageLinks = document.querySelectorAll('.language-item, .language-mobile-item');
    
    languageLinks.forEach(link => {
      // Get current href and language data attribute
      let href = link.getAttribute('href');
      const dataLang = link.getAttribute('data-lang');
      
      // Get current path
      const currentPath = window.location.pathname;
      
      // Special handling for Albanian (sq)
      if (dataLang === 'sq') {
        // If we're on a page with just a language prefix
        if (currentPath === '/de' || currentPath === '/en') {
          // When on language root, go to site root
          link.setAttribute('href', '/');
        } else {
          // Extract the path without the language prefix
          let pathWithoutLang = currentPath;
          if (currentPath.startsWith('/en/')) {
            pathWithoutLang = currentPath.substring(3); // Remove /en
          } else if (currentPath.startsWith('/de/')) {
            pathWithoutLang = currentPath.substring(3); // Remove /de
          } else if (currentPath === '/en' || currentPath === '/de') {
            pathWithoutLang = '/';
          }
          
          // Set the link to the path without language prefix
          link.setAttribute('href', pathWithoutLang);
        }
        return;
      }
      
      // Special handling for other languages
      if (dataLang === 'en' || dataLang === 'de') {
        // Extract the path without any language prefix
        let pathWithoutLang = currentPath;
        if (currentPath.startsWith('/en/')) {
          pathWithoutLang = currentPath.substring(3); // Remove /en
        } else if (currentPath.startsWith('/de/')) {
          pathWithoutLang = currentPath.substring(3); // Remove /de
        } else if (currentPath === '/en' || currentPath === '/de') {
          pathWithoutLang = '/';
        }
        
        // Add the correct language prefix
        const prefix = dataLang === 'en' ? '/en' : '/de';
        const newPath = pathWithoutLang === '/' ? prefix : prefix + pathWithoutLang;
        link.setAttribute('href', newPath);
        return;
      }
      
      // Fix double slashes and ensure path starts with slash
      if (href && !href.startsWith('http')) {
        // Fix doubled slashes
        href = href.replace(/([^:])\/+/g, '$1/');
        
        // Ensure it starts with a slash if it's a relative URL
        if (!href.startsWith('/')) {
          href = '/' + href;
        }
        
        link.setAttribute('href', href);
      }
    });
  });
</script>{% schema %}
{
  "name": "Header",
  "settings": [
    {
      "type": "number",
      "id": "free_shipping_threshold",
      "label": "Free Shipping Threshold (in cents)",
      "default": 10000,
      "info": "This is the threshold amount above which shipping is free (e.g. 10000 = 100â‚¬)"
    },
    {
      "type": "text",
      "id": "free_shipping_text",
      "label": "Free Shipping Text",
      "default": "Free shipping on all orders above [amount]",
      "info": "Use [amount] where you want the threshold amount to appear"
    },
    {
      "type": "text",
      "id": "contact_email",
      "label": "Contact Email",
      "default": "info@flutra.eu"
    },
    {
      "type": "text",
      "id": "free_shipping_label",
      "label": "Free Shipping Label",
      "default": "Free",
      "info": "Text to display when shipping is free"
    },
    {
      "type": "text",
      "id": "account_text",
      "label": "Account Text",
      "default": "My Account"
    },
    {
      "type": "text",
      "id": "sign_in_text",
      "label": "Sign In Text",
      "default": "Sign In / Register"
    },
    {
      "type": "text",
      "id": "search_placeholder",
      "label": "Search Placeholder",
      "default": "Search products by name, or category"
    },
    {
      "type": "text",
      "id": "cart_text",
      "label": "Cart Text",
      "default": "Cart"
    },
    {
      "type": "text",
      "id": "your_cart_text",
      "label": "Your Cart Text",
      "default": "Your cart"
    },
    {
      "type": "text",
      "id": "items_text",
      "label": "Items Text",
      "default": "items"
    },
    {
      "type": "text",
      "id": "close_text",
      "label": "Close Text",
      "default": "Close"
    },
    {
      "type": "text",
      "id": "discount_code_text",
      "label": "Discount Code Text",
      "default": "Do you have a discount code?"
    },
    {
      "type": "text",
      "id": "enter_code_placeholder",
      "label": "Enter Code Placeholder",
      "default": "Enter your code"
    },
    {
      "type": "text",
      "id": "discount_saved_text",
      "label": "Discount Saved Text",
      "default": "Will be applied at checkout"
    },
    {
      "type": "text",
      "id": "order_discounts_text",
      "label": "Order Discounts Text",
      "default": "Order Discounts"
    },
    {
      "type": "text",
      "id": "shipping_costs_text",
      "label": "Shipping Costs Text",
      "default": "Shipping costs"
    },
    {
      "type": "number",
      "id": "default_shipping_cost",
      "label": "Default Shipping Cost (in cents)",
      "default": 500,
      "info": "This will be used when shipping rates cannot be calculated. Example: 500 = 5.00"
    },
    {
      "type": "text",
      "id": "subtotal_text",
      "label": "Subtotal Text",
      "default": "Subtotal"
    },
    {
      "type": "text",
      "id": "checkout_button_text",
      "label": "Checkout Button Text",
      "default": "Continue to Checkout"
    },
    {
      "type": "text",
      "id": "email_contact_text",
      "label": "Email Contact Text",
      "default": "Email contact"
    },
    {
      "type": "text",
      "id": "mobile_free_shipping_text",
      "label": "Mobile Free Shipping Text",
      "default": "Free shipping inside 48h on all orders above [amount] in Kosovo",
      "info": "Use [amount] where you want the threshold amount to appear"
    },
    {
      "type": "text",
      "id": "choose_language_text",
      "label": "Choose Language Text",
      "default": "Choose Language"
    }
  ],
  "presets": [
    {
      "name": "Header"
    }
  ]
}{% endschema %}